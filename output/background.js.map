{"version":3,"sources":["webpack:///./src/utils/cache.js","webpack:///./src/utils/calculateBlock.js","webpack:///./src/utils/fetchBlocks.js","webpack:///./src/utils/getLocalStorage.js","webpack:///./src/utils/getTab.js","webpack:///./src/utils/getTabs.js","webpack:///./src/utils/getTwitterTab.js","webpack:///./src/utils/inject.js","webpack:///./src/utils/isTwitterTab.js","webpack:///./src/utils/lzmaWorker.js","webpack:///./src/utils/sendTabMessage.js","webpack:///./src/utils/timeoutPromise.js","webpack:///webpack/bootstrap","webpack:///./src/background.js"],"names":[],"mappings":";;;;;;;;;AAAA,wBAAwB,mBAAO,CAAC,yDAAmB;;AAEnD;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,C;;;;;;;;;;AC9BA,sBAAsB,mBAAO,CAAC,qDAAiB;AAC/C,uBAAuB,mBAAO,CAAC,uDAAkB;AACjD,oBAAoB,mBAAO,CAAC,iDAAe;AAC3C,wBAAwB,mBAAO,CAAC,yDAAmB;;AAEnD;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,aAAa;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;ACnDA,wBAAwB,mBAAO,CAAC,yDAAmB;AACnD,aAAa,yEAA4B;AACzC,cAAc,mBAAO,CAAC,qCAAS;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;ACrBA,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL,C;;;;;;;;;;ACZA,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;ACNA,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL,C;;;;;;;;;;ACvBA,gBAAgB,mBAAO,CAAC,yCAAW;AACnC,wBAAwB,mBAAO,CAAC,yDAAmB;AACnD,uBAAuB,mBAAO,CAAC,uDAAkB;AACjD,eAAe,mBAAO,CAAC,uCAAU;AACjC,qBAAqB,mBAAO,CAAC,mDAAgB;AAC7C,eAAe,mBAAO,CAAC,uCAAU;AACjC,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,yHAAyH,gBAAgB;;AAEzI;AACA,KAAK;AACL,C;;;;;;;;;;AC/BA,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL,C;;;;;;;;;;ACbA,mBAAmB,IAAI;AACvB;AACA,eAAe,KAAK;AACpB;AACA,KAAK;AACL;AACA;AACA,C;;;;;;;;;;ACPA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,ilBAAilB;AACjlB;;AAEA;AACA,sDAAsD;AACtD,mDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sDAAsD;AACtD,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8FAA8F;AACjH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,yDAAyD;AACzD,4DAA4D;AAC5D;AACA,uBAAuB,OAAO;AAC9B,gEAAgE;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,2CAA2C;AACzD,mFAAmF;AACnF,mFAAmF;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,uCAAuC;AACrE;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,yEAAyE;AACzE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,kEAAkE;AAClE,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA,mBAAmB,OAAO;AAC1B,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA,6BAA6B,sCAAsC;AACnE;AACA;AACA,8BAA8B,sCAAsC;AACpE;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wDAAwD;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,kCAAkC;AAClE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,8BAA8B,eAAe;AAC7C,gEAAgE;AAChE,gEAAgE;AAChE;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,yEAAyE;AACzE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,qCAAqC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,uDAAuD;AACvD;AACA;AACA;;AAEA;AACA,uDAAuD;;AAEvD;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,yDAAyD;AACzD;AACA;AACA;;AAEA;AACA,yDAAyD;;AAEzD;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa;AACb;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,SAAS,GAAG,gBAAgB;;;;;;;;;;;AC3mF5B,uBAAuB,mBAAO,CAAC,uDAAkB;;AAEjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL,C;;;;;;;;;;ACZA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;;UCTA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,wBAAwB,mBAAO,CAAC,+DAAyB;AACzD,sBAAsB,mBAAO,CAAC,2DAAuB;AACrD,uBAAuB,mBAAO,CAAC,6DAAwB;AACvD,kCAAkC,mBAAO,CAAC,6DAAwB;;AAElE,eAAe,mBAAO,CAAC,6CAAgB;AACvC,gBAAgB,mBAAO,CAAC,+CAAiB;AACzC,qBAAqB,mBAAO,CAAC,yDAAsB;AACnD,oBAAoB,mBAAO,CAAC,uDAAqB;AACjD,uBAAuB,mBAAO,CAAC,6DAAwB;;AAEvD;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;;AAElC;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,wBAAwB;AACxB,oBAAoB;AACpB;AACA;AACA,wBAAwB;AACxB;AACA,aAAa;;AAEb,0CAA0C,kCAAkC;AAC5E;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,kCAAkC;AACxE,KAAK;AACL,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,CAAC;;AAED,kDAAkD,cAAc,E","file":"background.js","sourcesContent":["const getLocalStorage = require('./getLocalStorage');\r\n\r\nmodule.exports = class {\r\n    static async get(key) {\r\n\r\n        const data = await getLocalStorage(key)\r\n\r\n        if (data) {\r\n            let currentDate = new Date();\r\n            let expireDate = new Date(data.expire);\r\n\r\n            if (!(currentDate > expireDate)) return data.data;\r\n\r\n            chrome.storage.local.remove(key);\r\n            return null;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static async has(key) {\r\n        return !!await this.get(key);\r\n    }\r\n    static async set(key, value, expire) {\r\n        let expireDate = new Date();\r\n        let set = {};\r\n        expireDate.setSeconds(expireDate.getSeconds() + expire);\r\n        set[key] = {data: value, expire: expireDate.toString()};\r\n        chrome.storage.local.set(set)\r\n    }\r\n}","const getTwitterTab = require('./getTwitterTab')\r\nconst sendTabMessage = require('./sendTabMessage')\r\nconst fetchBlocks = require('./fetchBlocks')\r\nconst getLocalStorage = require('./getLocalStorage')\r\n\r\nmodule.exports = async () => {\r\n    const twitterTab = await getTwitterTab();\r\n    if (!twitterTab) return {\r\n        error: 1\r\n    }\r\n\r\n    const metaData = await sendTabMessage(twitterTab.id, {type: 'meta'});\r\n    if (!metaData || !metaData.data || !metaData['data']['session']['user_id']) return {\r\n        error: 1\r\n    }\r\n\r\n    const user = await sendTabMessage(twitterTab.id, {\r\n        type: 'userById',\r\n        data: {\r\n            user_id: metaData['data']['session']['user_id']\r\n        }\r\n    });\r\n\r\n    if (!user) return {\r\n        error: 1\r\n    }\r\n\r\n    const fetchCurrentBlocks = (await sendTabMessage(twitterTab.id, {\r\n        type: 'currentBlocks',\r\n    })).data;\r\n\r\n    const currentBlocksIds = Object.assign([], fetchCurrentBlocks.map(m => m.id));\r\n    const blocks = await fetchBlocks();\r\n    const currentBlocks = Object.assign([], currentBlocksIds.filter(f => blocks.includes(f)));\r\n    const blocking = Object.assign([], blocks.filter(f => !currentBlocks.includes(f)));\r\n\r\n    const ignore = await getLocalStorage('ignore');\r\n\r\n    return {\r\n        meta:metaData.data,\r\n        user:user.data,\r\n        current: currentBlocks,\r\n        blocks: blocks.filter(f => (ignore && Array.isArray(ignore) && ignore.length > 0)\r\n            ? ignore.indexOf(f) === -1\r\n            : true\r\n        ),\r\n        blocking: blocking.filter(f => (ignore && Array.isArray(ignore) && ignore.length > 0)\r\n            ? ignore.indexOf(f) === -1\r\n            : true\r\n        )\r\n    };\r\n}","const getLocalStorage = require('./getLocalStorage')\r\nconst lzma = require('./lzmaWorker').LZMA;\r\nconst cache = require('./cache');\r\n\r\nmodule.exports = async () => {\r\n    const storage = await cache.get('blocks');\r\n    let data;\r\n\r\n    if (!storage) {\r\n        data = await fetch('https://twitter.ibax.xyz/blocks.json').then(async (e) => {\r\n            return await e.json();\r\n        }).catch(e => false);\r\n        if (data) await cache.set('blocks', data, 5)\r\n    } else {\r\n        data = storage;\r\n    }\r\n\r\n    if ((!data || !Array.isArray(data)) || data.length === 0) return [];\r\n\r\n    return JSON.parse(lzma.decompress(data));\r\n\r\n}\r\n","const timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = async (key) => {\r\n    return timeoutPromise(5000, new Promise((resolve, reject) => {\r\n        try {\r\n            chrome.storage.local.get(key, (response) => {\r\n                resolve(response[key])\r\n            })\r\n        } catch (e) {\r\n            resolve(e.message);\r\n        }\r\n    }))\r\n}","const timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = async (tabId) => {\r\n    return timeoutPromise(5000, new Promise((resolve, reject) => {\r\n        chrome.tabs.get(tabId).then(e => resolve(e)).catch(e => resolve(false))\r\n    }))\r\n}","const timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = () => {\r\n    return timeoutPromise(5000, new Promise((resolve, reject) => {\r\n        const interval = setInterval(async () => {\r\n            try {\r\n                chrome.tabs.query({})\r\n                    .then(e => {\r\n                        clearInterval(interval);\r\n                        resolve(e);\r\n                    }).catch(e => false)\r\n            } catch (e) {\r\n                resolve(false)\r\n                clearInterval(interval)\r\n            }\r\n        }, 10)\r\n\r\n        setTimeout(() => {\r\n            resolve(false)\r\n            clearInterval(interval)\r\n        }, 5000);\r\n    }))\r\n\r\n}","const getTabs = require('./getTabs');\r\nconst getLocalStorage = require('./getLocalStorage');\r\nconst sendTabMessage = require('./sendTabMessage');\r\nconst inject = require('./inject');\r\nconst isTwitterTab = require('./isTwitterTab');\r\nconst getTab = require('./getTab');\r\nconst timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = async () => {\r\n    return timeoutPromise(5000, new Promise(async (resolve, reject) => {\r\n        setTimeout(() => resolve(false), 5000);\r\n\r\n        const tabs = await getTabs();\r\n\r\n        // Sekmeler boş ise veya sekme yok ise\r\n        if (!tabs || !Array.isArray(tabs) || tabs.length === 0) return resolve(false);\r\n\r\n        const twitterTab = tabs.find(f => isTwitterTab(f));\r\n\r\n        // Twitter sekmesi bulunmuyorsa\r\n        if (!twitterTab) return resolve(false);\r\n\r\n        const tabStore = await getLocalStorage('tab');\r\n\r\n        // Depoda var ise ve sekme bulunuyorsa ve ping dönerse\r\n        if (tabStore && await getTab(tabStore.id) && await inject(tabStore.id) && await sendTabMessage(tabStore.id, 'ping')) return resolve(tabStore)\r\n\r\n        if (await inject(twitterTab.id) && await sendTabMessage(twitterTab.id, 'ping')) return chrome.storage.local.set({tab: twitterTab}, () => resolve(twitterTab))\r\n\r\n        resolve(false);\r\n    }))\r\n}","const timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = async (tabId) => {\r\n    if (!tabId) return false;\r\n\r\n    return timeoutPromise(5000, new Promise((resolve) => {\r\n        chrome.scripting.executeScript({\r\n            target: {\r\n                tabId: tabId\r\n            },\r\n            files: ['./foreground.js']\r\n        }).then(e => resolve(e)).catch(e => resolve(false))\r\n    }))\r\n}","module.exports = ({url}) => {\r\n    try {\r\n        const {host} = new URL(url);\r\n        return host === 'twitter.com' || host === 'www.twitter.com'\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}","/// © 2015 Nathan Rugg <nmrugg@gmail.com> | MIT\r\n/// See LICENSE for more details.\r\n\r\n/* jshint noarg:true, boss:true, unused:strict, strict:true, undef:true, noarg: true, forin:true, evil:true, newcap:false, -W041, -W021, worker:true, browser:true, node:true */\r\n\r\n/* global setImmediate, setTimeout, window, onmessage */\r\n\r\n/** xs */\r\n///NOTE: This is the master file that is used to generate lzma-c.js and lzma-d.js.\r\n///      Comments are used to determine which parts are to be removed.\r\n///\r\n/// cs-ce (compression start-end)\r\n/// ds-de (decompression start-end)\r\n/// xs-xe (only in this file start-end)\r\n/// co    (compression only)\r\n/// do    (decompression only)\r\n/** xe */\r\n\r\nvar LZMA = (function () {\r\n\r\n    \"use strict\";\r\n\r\n    var /** cs */\r\n        action_compress   = 1,\r\n        /** ce */\r\n        /** ds */\r\n        action_decompress = 2,\r\n        /** de */\r\n        action_progress   = 3,\r\n        wait = typeof setImmediate == \"function\" ? setImmediate : setTimeout,\r\n        __4294967296 = 4294967296,\r\n        N1_longLit = [4294967295, -__4294967296],\r\n        /** cs */\r\n        MIN_VALUE = [0, -9223372036854775808],\r\n        /** ce */\r\n        P0_longLit = [0, 0],\r\n        P1_longLit = [1, 0];\r\n\r\n    function update_progress(percent, cbn) {\r\n        postMessage({\r\n            action: action_progress,\r\n            cbn: cbn,\r\n            result: percent\r\n        });\r\n    }\r\n\r\n    function initDim(len) {\r\n        ///NOTE: This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\r\n        var a = [];\r\n        a[len - 1] = undefined;\r\n        return a;\r\n    }\r\n\r\n    function add(a, b) {\r\n        return create(a[0] + b[0], a[1] + b[1]);\r\n    }\r\n\r\n    /** cs */\r\n    function and(a, b) {\r\n        return makeFromBits(~~Math.max(Math.min(a[1] / __4294967296, 2147483647), -2147483648) & ~~Math.max(Math.min(b[1] / __4294967296, 2147483647), -2147483648), lowBits_0(a) & lowBits_0(b));\r\n    }\r\n    /** ce */\r\n\r\n    function compare(a, b) {\r\n        var nega, negb;\r\n        if (a[0] == b[0] && a[1] == b[1]) {\r\n            return 0;\r\n        }\r\n        nega = a[1] < 0;\r\n        negb = b[1] < 0;\r\n        if (nega && !negb) {\r\n            return -1;\r\n        }\r\n        if (!nega && negb) {\r\n            return 1;\r\n        }\r\n        if (sub(a, b)[1] < 0) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    function create(valueLow, valueHigh) {\r\n        var diffHigh, diffLow;\r\n        valueHigh %= 1.8446744073709552E19;\r\n        valueLow %= 1.8446744073709552E19;\r\n        diffHigh = valueHigh % __4294967296;\r\n        diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\r\n        valueHigh = valueHigh - diffHigh + diffLow;\r\n        valueLow = valueLow - diffLow + diffHigh;\r\n        while (valueLow < 0) {\r\n            valueLow += __4294967296;\r\n            valueHigh -= __4294967296;\r\n        }\r\n        while (valueLow > 4294967295) {\r\n            valueLow -= __4294967296;\r\n            valueHigh += __4294967296;\r\n        }\r\n        valueHigh = valueHigh % 1.8446744073709552E19;\r\n        while (valueHigh > 9223372032559808512) {\r\n            valueHigh -= 1.8446744073709552E19;\r\n        }\r\n        while (valueHigh < -9223372036854775808) {\r\n            valueHigh += 1.8446744073709552E19;\r\n        }\r\n        return [valueLow, valueHigh];\r\n    }\r\n\r\n    /** cs */\r\n    function eq(a, b) {\r\n        return a[0] == b[0] && a[1] == b[1];\r\n    }\r\n    /** ce */\r\n    function fromInt(value) {\r\n        if (value >= 0) {\r\n            return [value, 0];\r\n        } else {\r\n            return [value + __4294967296, -__4294967296];\r\n        }\r\n    }\r\n\r\n    function lowBits_0(a) {\r\n        if (a[0] >= 2147483648) {\r\n            return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\r\n        } else {\r\n            return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\r\n        }\r\n    }\r\n    /** cs */\r\n    function makeFromBits(highBits, lowBits) {\r\n        var high, low;\r\n        high = highBits * __4294967296;\r\n        low = lowBits;\r\n        if (lowBits < 0) {\r\n            low += __4294967296;\r\n        }\r\n        return [low, high];\r\n    }\r\n\r\n    function pwrAsDouble(n) {\r\n        if (n <= 30) {\r\n            return 1 << n;\r\n        } else {\r\n            return pwrAsDouble(30) * pwrAsDouble(n - 30);\r\n        }\r\n    }\r\n\r\n    function shl(a, n) {\r\n        var diff, newHigh, newLow, twoToN;\r\n        n &= 63;\r\n        if (eq(a, MIN_VALUE)) {\r\n            if (!n) {\r\n                return a;\r\n            }\r\n            return P0_longLit;\r\n        }\r\n        if (a[1] < 0) {\r\n            throw new Error(\"Neg\");\r\n        }\r\n        twoToN = pwrAsDouble(n);\r\n        newHigh = a[1] * twoToN % 1.8446744073709552E19;\r\n        newLow = a[0] * twoToN;\r\n        diff = newLow - newLow % __4294967296;\r\n        newHigh += diff;\r\n        newLow -= diff;\r\n        if (newHigh >= 9223372036854775807) {\r\n            newHigh -= 1.8446744073709552E19;\r\n        }\r\n        return [newLow, newHigh];\r\n    }\r\n\r\n    function shr(a, n) {\r\n        var shiftFact;\r\n        n &= 63;\r\n        shiftFact = pwrAsDouble(n);\r\n        return create(Math.floor(a[0] / shiftFact), a[1] / shiftFact);\r\n    }\r\n\r\n    function shru(a, n) {\r\n        var sr;\r\n        n &= 63;\r\n        sr = shr(a, n);\r\n        if (a[1] < 0) {\r\n            sr = add(sr, shl([2, 0], 63 - n));\r\n        }\r\n        return sr;\r\n    }\r\n\r\n    /** ce */\r\n\r\n    function sub(a, b) {\r\n        return create(a[0] - b[0], a[1] - b[1]);\r\n    }\r\n\r\n    function $ByteArrayInputStream(this$static, buf) {\r\n        this$static.buf = buf;\r\n        this$static.pos = 0;\r\n        this$static.count = buf.length;\r\n        return this$static;\r\n    }\r\n\r\n    /** ds */\r\n    function $read(this$static) {\r\n        if (this$static.pos >= this$static.count)\r\n            return -1;\r\n        return this$static.buf[this$static.pos++] & 255;\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    function $read_0(this$static, buf, off, len) {\r\n        if (this$static.pos >= this$static.count)\r\n            return -1;\r\n        len = Math.min(len, this$static.count - this$static.pos);\r\n        arraycopy(this$static.buf, this$static.pos, buf, off, len);\r\n        this$static.pos += len;\r\n        return len;\r\n    }\r\n    /** ce */\r\n\r\n    function $ByteArrayOutputStream(this$static) {\r\n        this$static.buf = initDim(32);\r\n        this$static.count = 0;\r\n        return this$static;\r\n    }\r\n\r\n    function $toByteArray(this$static) {\r\n        var data = this$static.buf;\r\n        data.length = this$static.count;\r\n        return data;\r\n    }\r\n\r\n    /** cs */\r\n    function $write(this$static, b) {\r\n        this$static.buf[this$static.count++] = b << 24 >> 24;\r\n    }\r\n    /** ce */\r\n\r\n    function $write_0(this$static, buf, off, len) {\r\n        arraycopy(buf, off, this$static.buf, this$static.count, len);\r\n        this$static.count += len;\r\n    }\r\n\r\n    /** cs */\r\n    function $getChars(this$static, srcBegin, srcEnd, dst, dstBegin) {\r\n        var srcIdx;\r\n        for (srcIdx = srcBegin; srcIdx < srcEnd; ++srcIdx) {\r\n            dst[dstBegin++] = this$static.charCodeAt(srcIdx);\r\n        }\r\n    }\r\n    /** ce */\r\n\r\n    function arraycopy(src, srcOfs, dest, destOfs, len) {\r\n        for (var i = 0; i < len; ++i) {\r\n            dest[destOfs + i] = src[srcOfs + i];\r\n        }\r\n    }\r\n\r\n    /** cs */\r\n    function $configure(this$static, encoder) {\r\n        $SetDictionarySize_0(encoder, 1 << this$static.s);\r\n        encoder._numFastBytes = this$static.f;\r\n        $SetMatchFinder(encoder, this$static.m);\r\n\r\n        /// lc is always 3\r\n        /// lp is always 0\r\n        /// pb is always 2\r\n        encoder._numLiteralPosStateBits = 0;\r\n        encoder._numLiteralContextBits = 3;\r\n        encoder._posStateBits = 2;\r\n        ///this$static._posStateMask = (1 << pb) - 1;\r\n        encoder._posStateMask = 3;\r\n    }\r\n\r\n    function $init(this$static, input, output, length_0, mode) {\r\n        var encoder, i;\r\n        if (compare(length_0, N1_longLit) < 0)\r\n            throw new Error(\"invalid length \" + length_0);\r\n        this$static.length_0 = length_0;\r\n        encoder = $Encoder({});\r\n        $configure(mode, encoder);\r\n        encoder._writeEndMark = typeof LZMA.disableEndMark == \"undefined\";\r\n        $WriteCoderProperties(encoder, output);\r\n        for (i = 0; i < 64; i += 8)\r\n            $write(output, lowBits_0(shr(length_0, i)) & 255);\r\n        this$static.chunker = (encoder._needReleaseMFStream = 0 , (encoder._inStream = input , encoder._finished = 0 , $Create_2(encoder) , encoder._rangeEncoder.Stream = output , $Init_4(encoder) , $FillDistancesPrices(encoder) , $FillAlignPrices(encoder) , encoder._lenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._lenEncoder, 1 << encoder._posStateBits) , encoder._repMatchLenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._repMatchLenEncoder, 1 << encoder._posStateBits) , encoder.nowPos64 = P0_longLit , undefined) , $Chunker_0({}, encoder));\r\n    }\r\n\r\n    function $LZMAByteArrayCompressor(this$static, data, mode) {\r\n        this$static.output = $ByteArrayOutputStream({});\r\n        $init(this$static, $ByteArrayInputStream({}, data), this$static.output, fromInt(data.length), mode);\r\n        return this$static;\r\n    }\r\n    /** ce */\r\n\r\n    /** ds */\r\n    function $init_0(this$static, input, output) {\r\n        var decoder,\r\n            hex_length = \"\",\r\n            i,\r\n            properties = [],\r\n            r,\r\n            tmp_length;\r\n\r\n        for (i = 0; i < 5; ++i) {\r\n            r = $read(input);\r\n            if (r == -1)\r\n                throw new Error(\"truncated input\");\r\n            properties[i] = r << 24 >> 24;\r\n        }\r\n\r\n        decoder = $Decoder({});\r\n        if (!$SetDecoderProperties(decoder, properties)) {\r\n            throw new Error(\"corrupted input\");\r\n        }\r\n        for (i = 0; i < 64; i += 8) {\r\n            r = $read(input);\r\n            if (r == -1)\r\n                throw new Error(\"truncated input\");\r\n            r = r.toString(16);\r\n            if (r.length == 1) r = \"0\" + r;\r\n            hex_length = r + \"\" + hex_length;\r\n        }\r\n\r\n        /// Was the length set in the header (if it was compressed from a stream, the length is all f\"s).\r\n        if (/^0+$|^f+$/i.test(hex_length)) {\r\n            /// The length is unknown, so set to -1.\r\n            this$static.length_0 = N1_longLit;\r\n        } else {\r\n            ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.\r\n            tmp_length = parseInt(hex_length, 16);\r\n            /// If the length is too long to handle, just set it to unknown.\r\n            if (tmp_length > 4294967295) {\r\n                this$static.length_0 = N1_longLit;\r\n            } else {\r\n                this$static.length_0 = fromInt(tmp_length);\r\n            }\r\n        }\r\n\r\n        this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\r\n    }\r\n\r\n    function $LZMAByteArrayDecompressor(this$static, data) {\r\n        this$static.output = $ByteArrayOutputStream({});\r\n        $init_0(this$static, $ByteArrayInputStream({}, data), this$static.output);\r\n        return this$static;\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    function $Create_4(this$static, keepSizeBefore, keepSizeAfter, keepSizeReserv) {\r\n        var blockSize;\r\n        this$static._keepSizeBefore = keepSizeBefore;\r\n        this$static._keepSizeAfter = keepSizeAfter;\r\n        blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;\r\n        if (this$static._bufferBase == null || this$static._blockSize != blockSize) {\r\n            this$static._bufferBase = null;\r\n            this$static._blockSize = blockSize;\r\n            this$static._bufferBase = initDim(this$static._blockSize);\r\n        }\r\n        this$static._pointerToLastSafePosition = this$static._blockSize - keepSizeAfter;\r\n    }\r\n\r\n    function $GetIndexByte(this$static, index) {\r\n        return this$static._bufferBase[this$static._bufferOffset + this$static._pos + index];\r\n    }\r\n\r\n    function $GetMatchLen(this$static, index, distance, limit) {\r\n        var i, pby;\r\n        if (this$static._streamEndWasReached) {\r\n            if (this$static._pos + index + limit > this$static._streamPos) {\r\n                limit = this$static._streamPos - (this$static._pos + index);\r\n            }\r\n        }\r\n        ++distance;\r\n        pby = this$static._bufferOffset + this$static._pos + index;\r\n        for (i = 0; i < limit && this$static._bufferBase[pby + i] == this$static._bufferBase[pby + i - distance]; ++i) {\r\n        }\r\n        return i;\r\n    }\r\n\r\n    function $GetNumAvailableBytes(this$static) {\r\n        return this$static._streamPos - this$static._pos;\r\n    }\r\n\r\n    function $MoveBlock(this$static) {\r\n        var i, numBytes, offset;\r\n        offset = this$static._bufferOffset + this$static._pos - this$static._keepSizeBefore;\r\n        if (offset > 0) {\r\n            --offset;\r\n        }\r\n        numBytes = this$static._bufferOffset + this$static._streamPos - offset;\r\n        for (i = 0; i < numBytes; ++i) {\r\n            this$static._bufferBase[i] = this$static._bufferBase[offset + i];\r\n        }\r\n        this$static._bufferOffset -= offset;\r\n    }\r\n\r\n    function $MovePos_1(this$static) {\r\n        var pointerToPostion;\r\n        ++this$static._pos;\r\n        if (this$static._pos > this$static._posLimit) {\r\n            pointerToPostion = this$static._bufferOffset + this$static._pos;\r\n            if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n                $MoveBlock(this$static);\r\n            }\r\n            $ReadBlock(this$static);\r\n        }\r\n    }\r\n\r\n    function $ReadBlock(this$static) {\r\n        var numReadBytes, pointerToPostion, size;\r\n        if (this$static._streamEndWasReached)\r\n            return;\r\n        while (1) {\r\n            size = -this$static._bufferOffset + this$static._blockSize - this$static._streamPos;\r\n            if (!size)\r\n                return;\r\n            numReadBytes = $read_0(this$static._stream, this$static._bufferBase, this$static._bufferOffset + this$static._streamPos, size);\r\n            if (numReadBytes == -1) {\r\n                this$static._posLimit = this$static._streamPos;\r\n                pointerToPostion = this$static._bufferOffset + this$static._posLimit;\r\n                if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n                    this$static._posLimit = this$static._pointerToLastSafePosition - this$static._bufferOffset;\r\n                }\r\n                this$static._streamEndWasReached = 1;\r\n                return;\r\n            }\r\n            this$static._streamPos += numReadBytes;\r\n            if (this$static._streamPos >= this$static._pos + this$static._keepSizeAfter) {\r\n                this$static._posLimit = this$static._streamPos - this$static._keepSizeAfter;\r\n            }\r\n        }\r\n    }\r\n\r\n    function $ReduceOffsets(this$static, subValue) {\r\n        this$static._bufferOffset += subValue;\r\n        this$static._posLimit -= subValue;\r\n        this$static._pos -= subValue;\r\n        this$static._streamPos -= subValue;\r\n    }\r\n\r\n    var CrcTable = (function () {\r\n        var i, j, r, CrcTable = [];\r\n        for (i = 0; i < 256; ++i) {\r\n            r = i;\r\n            for (j = 0; j < 8; ++j)\r\n                if ((r & 1) != 0) {\r\n                    r = r >>> 1 ^ -306674912;\r\n                } else {\r\n                    r >>>= 1;\r\n                }\r\n            CrcTable[i] = r;\r\n        }\r\n        return CrcTable;\r\n    }());\r\n\r\n    function $Create_3(this$static, historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {\r\n        var cyclicBufferSize, hs, windowReservSize;\r\n        if (historySize < 1073741567) {\r\n            this$static._cutValue = 16 + (matchMaxLen >> 1);\r\n            windowReservSize = ~~((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter) / 2) + 256;\r\n            $Create_4(this$static, historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);\r\n            this$static._matchMaxLen = matchMaxLen;\r\n            cyclicBufferSize = historySize + 1;\r\n            if (this$static._cyclicBufferSize != cyclicBufferSize) {\r\n                this$static._son = initDim((this$static._cyclicBufferSize = cyclicBufferSize) * 2);\r\n            }\r\n\r\n            hs = 65536;\r\n            if (this$static.HASH_ARRAY) {\r\n                hs = historySize - 1;\r\n                hs |= hs >> 1;\r\n                hs |= hs >> 2;\r\n                hs |= hs >> 4;\r\n                hs |= hs >> 8;\r\n                hs >>= 1;\r\n                hs |= 65535;\r\n                if (hs > 16777216)\r\n                    hs >>= 1;\r\n                this$static._hashMask = hs;\r\n                ++hs;\r\n                hs += this$static.kFixHashSize;\r\n            }\r\n\r\n            if (hs != this$static._hashSizeSum) {\r\n                this$static._hash = initDim(this$static._hashSizeSum = hs);\r\n            }\r\n        }\r\n    }\r\n\r\n    function $GetMatches(this$static, distances) {\r\n        var count, cur, curMatch, curMatch2, curMatch3, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, maxLen, offset, pby1, ptr0, ptr1, temp;\r\n        if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n            lenLimit = this$static._matchMaxLen;\r\n        } else {\r\n            lenLimit = this$static._streamPos - this$static._pos;\r\n            if (lenLimit < this$static.kMinMatchCheck) {\r\n                $MovePos_0(this$static);\r\n                return 0;\r\n            }\r\n        }\r\n        offset = 0;\r\n        matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n        cur = this$static._bufferOffset + this$static._pos;\r\n        maxLen = 1;\r\n        hash2Value = 0;\r\n        hash3Value = 0;\r\n        if (this$static.HASH_ARRAY) {\r\n            temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n            hash2Value = temp & 1023;\r\n            temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n            hash3Value = temp & 65535;\r\n            hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n        } else {\r\n            hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n        }\r\n\r\n        curMatch = this$static._hash[this$static.kFixHashSize + hashValue] || 0;\r\n        if (this$static.HASH_ARRAY) {\r\n            curMatch2 = this$static._hash[hash2Value] || 0;\r\n            curMatch3 = this$static._hash[1024 + hash3Value] || 0;\r\n            this$static._hash[hash2Value] = this$static._pos;\r\n            this$static._hash[1024 + hash3Value] = this$static._pos;\r\n            if (curMatch2 > matchMinPos) {\r\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch2] == this$static._bufferBase[cur]) {\r\n                    distances[offset++] = maxLen = 2;\r\n                    distances[offset++] = this$static._pos - curMatch2 - 1;\r\n                }\r\n            }\r\n            if (curMatch3 > matchMinPos) {\r\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch3] == this$static._bufferBase[cur]) {\r\n                    if (curMatch3 == curMatch2) {\r\n                        offset -= 2;\r\n                    }\r\n                    distances[offset++] = maxLen = 3;\r\n                    distances[offset++] = this$static._pos - curMatch3 - 1;\r\n                    curMatch2 = curMatch3;\r\n                }\r\n            }\r\n            if (offset != 0 && curMatch2 == curMatch) {\r\n                offset -= 2;\r\n                maxLen = 1;\r\n            }\r\n        }\r\n        this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n        ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n        ptr1 = this$static._cyclicBufferPos << 1;\r\n        len0 = len1 = this$static.kNumHashDirectBytes;\r\n        if (this$static.kNumHashDirectBytes != 0) {\r\n            if (curMatch > matchMinPos) {\r\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch + this$static.kNumHashDirectBytes] != this$static._bufferBase[cur + this$static.kNumHashDirectBytes]) {\r\n                    distances[offset++] = maxLen = this$static.kNumHashDirectBytes;\r\n                    distances[offset++] = this$static._pos - curMatch - 1;\r\n                }\r\n            }\r\n        }\r\n        count = this$static._cutValue;\r\n        while (1) {\r\n            if (curMatch <= matchMinPos || count-- == 0) {\r\n                this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n                break;\r\n            }\r\n            delta = this$static._pos - curMatch;\r\n            cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n            pby1 = this$static._bufferOffset + curMatch;\r\n            len = len0 < len1?len0:len1;\r\n            if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n                while (++len != lenLimit) {\r\n                    if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (maxLen < len) {\r\n                    distances[offset++] = maxLen = len;\r\n                    distances[offset++] = delta - 1;\r\n                    if (len == lenLimit) {\r\n                        this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                        this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n                this$static._son[ptr1] = curMatch;\r\n                ptr1 = cyclicPos + 1;\r\n                curMatch = this$static._son[ptr1];\r\n                len1 = len;\r\n            } else {\r\n                this$static._son[ptr0] = curMatch;\r\n                ptr0 = cyclicPos;\r\n                curMatch = this$static._son[ptr0];\r\n                len0 = len;\r\n            }\r\n        }\r\n        $MovePos_0(this$static);\r\n        return offset;\r\n    }\r\n\r\n    function $Init_5(this$static) {\r\n        this$static._bufferOffset = 0;\r\n        this$static._pos = 0;\r\n        this$static._streamPos = 0;\r\n        this$static._streamEndWasReached = 0;\r\n        $ReadBlock(this$static);\r\n        this$static._cyclicBufferPos = 0;\r\n        $ReduceOffsets(this$static, -1);\r\n    }\r\n\r\n    function $MovePos_0(this$static) {\r\n        var subValue;\r\n        if (++this$static._cyclicBufferPos >= this$static._cyclicBufferSize) {\r\n            this$static._cyclicBufferPos = 0;\r\n        }\r\n        $MovePos_1(this$static);\r\n        if (this$static._pos == 1073741823) {\r\n            subValue = this$static._pos - this$static._cyclicBufferSize;\r\n            $NormalizeLinks(this$static._son, this$static._cyclicBufferSize * 2, subValue);\r\n            $NormalizeLinks(this$static._hash, this$static._hashSizeSum, subValue);\r\n            $ReduceOffsets(this$static, subValue);\r\n        }\r\n    }\r\n\r\n    ///NOTE: This is only called after reading one whole gigabyte.\r\n    function $NormalizeLinks(items, numItems, subValue) {\r\n        var i, value;\r\n        for (i = 0; i < numItems; ++i) {\r\n            value = items[i] || 0;\r\n            if (value <= subValue) {\r\n                value = 0;\r\n            } else {\r\n                value -= subValue;\r\n            }\r\n            items[i] = value;\r\n        }\r\n    }\r\n\r\n    function $SetType(this$static, numHashBytes) {\r\n        this$static.HASH_ARRAY = numHashBytes > 2;\r\n        if (this$static.HASH_ARRAY) {\r\n            this$static.kNumHashDirectBytes = 0;\r\n            this$static.kMinMatchCheck = 4;\r\n            this$static.kFixHashSize = 66560;\r\n        } else {\r\n            this$static.kNumHashDirectBytes = 2;\r\n            this$static.kMinMatchCheck = 3;\r\n            this$static.kFixHashSize = 0;\r\n        }\r\n    }\r\n\r\n    function $Skip(this$static, num) {\r\n        var count, cur, curMatch, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, pby1, ptr0, ptr1, temp;\r\n        do {\r\n            if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n                lenLimit = this$static._matchMaxLen;\r\n            } else {\r\n                lenLimit = this$static._streamPos - this$static._pos;\r\n                if (lenLimit < this$static.kMinMatchCheck) {\r\n                    $MovePos_0(this$static);\r\n                    continue;\r\n                }\r\n            }\r\n            matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n            cur = this$static._bufferOffset + this$static._pos;\r\n            if (this$static.HASH_ARRAY) {\r\n                temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n                hash2Value = temp & 1023;\r\n                this$static._hash[hash2Value] = this$static._pos;\r\n                temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n                hash3Value = temp & 65535;\r\n                this$static._hash[1024 + hash3Value] = this$static._pos;\r\n                hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n            } else {\r\n                hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n            }\r\n            curMatch = this$static._hash[this$static.kFixHashSize + hashValue];\r\n            this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n            ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n            ptr1 = this$static._cyclicBufferPos << 1;\r\n            len0 = len1 = this$static.kNumHashDirectBytes;\r\n            count = this$static._cutValue;\r\n            while (1) {\r\n                if (curMatch <= matchMinPos || count-- == 0) {\r\n                    this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n                    break;\r\n                }\r\n                delta = this$static._pos - curMatch;\r\n                cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n                pby1 = this$static._bufferOffset + curMatch;\r\n                len = len0 < len1?len0:len1;\r\n                if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n                    while (++len != lenLimit) {\r\n                        if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (len == lenLimit) {\r\n                        this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                        this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                        break;\r\n                    }\r\n                }\r\n                if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n                    this$static._son[ptr1] = curMatch;\r\n                    ptr1 = cyclicPos + 1;\r\n                    curMatch = this$static._son[ptr1];\r\n                    len1 = len;\r\n                } else {\r\n                    this$static._son[ptr0] = curMatch;\r\n                    ptr0 = cyclicPos;\r\n                    curMatch = this$static._son[ptr0];\r\n                    len0 = len;\r\n                }\r\n            }\r\n            $MovePos_0(this$static);\r\n        }\r\n        while (--num != 0);\r\n    }\r\n\r\n    /** ce */\r\n    /** ds */\r\n    function $CopyBlock(this$static, distance, len) {\r\n        var pos = this$static._pos - distance - 1;\r\n        if (pos < 0) {\r\n            pos += this$static._windowSize;\r\n        }\r\n        for (; len != 0; --len) {\r\n            if (pos >= this$static._windowSize) {\r\n                pos = 0;\r\n            }\r\n            this$static._buffer[this$static._pos++] = this$static._buffer[pos++];\r\n            if (this$static._pos >= this$static._windowSize) {\r\n                $Flush_0(this$static);\r\n            }\r\n        }\r\n    }\r\n\r\n    function $Create_5(this$static, windowSize) {\r\n        if (this$static._buffer == null || this$static._windowSize != windowSize) {\r\n            this$static._buffer = initDim(windowSize);\r\n        }\r\n        this$static._windowSize = windowSize;\r\n        this$static._pos = 0;\r\n        this$static._streamPos = 0;\r\n    }\r\n\r\n    function $Flush_0(this$static) {\r\n        var size = this$static._pos - this$static._streamPos;\r\n        if (!size) {\r\n            return;\r\n        }\r\n        $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\r\n        if (this$static._pos >= this$static._windowSize) {\r\n            this$static._pos = 0;\r\n        }\r\n        this$static._streamPos = this$static._pos;\r\n    }\r\n\r\n    function $GetByte(this$static, distance) {\r\n        var pos = this$static._pos - distance - 1;\r\n        if (pos < 0) {\r\n            pos += this$static._windowSize;\r\n        }\r\n        return this$static._buffer[pos];\r\n    }\r\n\r\n    function $PutByte(this$static, b) {\r\n        this$static._buffer[this$static._pos++] = b;\r\n        if (this$static._pos >= this$static._windowSize) {\r\n            $Flush_0(this$static);\r\n        }\r\n    }\r\n\r\n    function $ReleaseStream(this$static) {\r\n        $Flush_0(this$static);\r\n        this$static._stream = null;\r\n    }\r\n    /** de */\r\n\r\n    function GetLenToPosState(len) {\r\n        len -= 2;\r\n        if (len < 4) {\r\n            return len;\r\n        }\r\n        return 3;\r\n    }\r\n\r\n    function StateUpdateChar(index) {\r\n        if (index < 4) {\r\n            return 0;\r\n        }\r\n        if (index < 10) {\r\n            return index - 3;\r\n        }\r\n        return index - 6;\r\n    }\r\n\r\n    /** cs */\r\n    function $Chunker_0(this$static, encoder) {\r\n        this$static.encoder = encoder;\r\n        this$static.decoder = null;\r\n        this$static.alive = 1;\r\n        return this$static;\r\n    }\r\n    /** ce */\r\n    /** ds */\r\n    function $Chunker(this$static, decoder) {\r\n        this$static.decoder = decoder;\r\n        this$static.encoder = null;\r\n        this$static.alive = 1;\r\n        return this$static;\r\n    }\r\n    /** de */\r\n\r\n    function $processChunk(this$static) {\r\n        if (!this$static.alive) {\r\n            throw new Error(\"bad state\");\r\n        }\r\n\r\n        if (this$static.encoder) {\r\n            /// do:throw new Error(\"No encoding\");\r\n            /** cs */\r\n            $processEncoderChunk(this$static);\r\n            /** ce */\r\n        } else {\r\n            /// co:throw new Error(\"No decoding\");\r\n            /** ds */\r\n            $processDecoderChunk(this$static);\r\n            /** de */\r\n        }\r\n        return this$static.alive;\r\n    }\r\n\r\n    /** ds */\r\n    function $processDecoderChunk(this$static) {\r\n        var result = $CodeOneChunk(this$static.decoder);\r\n        if (result == -1) {\r\n            throw new Error(\"corrupted input\");\r\n        }\r\n        this$static.inBytesProcessed = N1_longLit;\r\n        this$static.outBytesProcessed = this$static.decoder.nowPos64;\r\n        if (result || compare(this$static.decoder.outSize, P0_longLit) >= 0 && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\r\n            $Flush_0(this$static.decoder.m_OutWindow);\r\n            $ReleaseStream(this$static.decoder.m_OutWindow);\r\n            this$static.decoder.m_RangeDecoder.Stream = null;\r\n            this$static.alive = 0;\r\n        }\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    function $processEncoderChunk(this$static) {\r\n        $CodeOneBlock(this$static.encoder, this$static.encoder.processedInSize, this$static.encoder.processedOutSize, this$static.encoder.finished);\r\n        this$static.inBytesProcessed = this$static.encoder.processedInSize[0];\r\n        if (this$static.encoder.finished[0]) {\r\n            $ReleaseStreams(this$static.encoder);\r\n            this$static.alive = 0;\r\n        }\r\n    }\r\n    /** ce */\r\n\r\n    /** ds */\r\n    function $CodeInChunks(this$static, inStream, outStream, outSize) {\r\n        this$static.m_RangeDecoder.Stream = inStream;\r\n        $ReleaseStream(this$static.m_OutWindow);\r\n        this$static.m_OutWindow._stream = outStream;\r\n        $Init_1(this$static);\r\n        this$static.state = 0;\r\n        this$static.rep0 = 0;\r\n        this$static.rep1 = 0;\r\n        this$static.rep2 = 0;\r\n        this$static.rep3 = 0;\r\n        this$static.outSize = outSize;\r\n        this$static.nowPos64 = P0_longLit;\r\n        this$static.prevByte = 0;\r\n        return $Chunker({}, this$static);\r\n    }\r\n\r\n    function $CodeOneChunk(this$static) {\r\n        var decoder2, distance, len, numDirectBits, posSlot, posState;\r\n        posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\r\n        if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\r\n            decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\r\n            if (this$static.state < 7) {\r\n                this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\r\n            } else {\r\n                this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\r\n            }\r\n            $PutByte(this$static.m_OutWindow, this$static.prevByte);\r\n            this$static.state = StateUpdateChar(this$static.state);\r\n            this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n        } else {\r\n            if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\r\n                len = 0;\r\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\r\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\r\n                        this$static.state = this$static.state < 7?9:11;\r\n                        len = 1;\r\n                    }\r\n                } else {\r\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state)) {\r\n                        distance = this$static.rep1;\r\n                    } else {\r\n                        if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state)) {\r\n                            distance = this$static.rep2;\r\n                        } else {\r\n                            distance = this$static.rep3;\r\n                            this$static.rep3 = this$static.rep2;\r\n                        }\r\n                        this$static.rep2 = this$static.rep1;\r\n                    }\r\n                    this$static.rep1 = this$static.rep0;\r\n                    this$static.rep0 = distance;\r\n                }\r\n                if (!len) {\r\n                    len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\r\n                    this$static.state = this$static.state < 7?8:11;\r\n                }\r\n            } else {\r\n                this$static.rep3 = this$static.rep2;\r\n                this$static.rep2 = this$static.rep1;\r\n                this$static.rep1 = this$static.rep0;\r\n                len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\r\n                this$static.state = this$static.state < 7?7:10;\r\n                posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\r\n                if (posSlot >= 4) {\r\n                    numDirectBits = (posSlot >> 1) - 1;\r\n                    this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\r\n                    if (posSlot < 14) {\r\n                        this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\r\n                    } else {\r\n                        this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\r\n                        this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\r\n                        if (this$static.rep0 < 0) {\r\n                            if (this$static.rep0 == -1) {\r\n                                return 1;\r\n                            }\r\n                            return -1;\r\n                        }\r\n                    }\r\n                } else\r\n                    this$static.rep0 = posSlot;\r\n            }\r\n            if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck) {\r\n                return -1;\r\n            }\r\n            $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\r\n            this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n            this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function $Decoder(this$static) {\r\n        this$static.m_OutWindow = {};\r\n        this$static.m_RangeDecoder = {};\r\n        this$static.m_IsMatchDecoders = initDim(192);\r\n        this$static.m_IsRepDecoders = initDim(12);\r\n        this$static.m_IsRepG0Decoders = initDim(12);\r\n        this$static.m_IsRepG1Decoders = initDim(12);\r\n        this$static.m_IsRepG2Decoders = initDim(12);\r\n        this$static.m_IsRep0LongDecoders = initDim(192);\r\n        this$static.m_PosSlotDecoder = initDim(4);\r\n        this$static.m_PosDecoders = initDim(114);\r\n        this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\r\n        this$static.m_LenDecoder = $Decoder$LenDecoder({});\r\n        this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\r\n        this$static.m_LiteralDecoder = {};\r\n        for (var i = 0; i < 4; ++i) {\r\n            this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\r\n        }\r\n        return this$static;\r\n    }\r\n\r\n    function $Init_1(this$static) {\r\n        this$static.m_OutWindow._streamPos = 0;\r\n        this$static.m_OutWindow._pos = 0;\r\n        InitBitModels(this$static.m_IsMatchDecoders);\r\n        InitBitModels(this$static.m_IsRep0LongDecoders);\r\n        InitBitModels(this$static.m_IsRepDecoders);\r\n        InitBitModels(this$static.m_IsRepG0Decoders);\r\n        InitBitModels(this$static.m_IsRepG1Decoders);\r\n        InitBitModels(this$static.m_IsRepG2Decoders);\r\n        InitBitModels(this$static.m_PosDecoders);\r\n        $Init_0(this$static.m_LiteralDecoder);\r\n        for (var i = 0; i < 4; ++i) {\r\n            InitBitModels(this$static.m_PosSlotDecoder[i].Models);\r\n        }\r\n        $Init(this$static.m_LenDecoder);\r\n        $Init(this$static.m_RepLenDecoder);\r\n        InitBitModels(this$static.m_PosAlignDecoder.Models);\r\n        $Init_8(this$static.m_RangeDecoder);\r\n    }\r\n\r\n    function $SetDecoderProperties(this$static, properties) {\r\n        var dictionarySize, i, lc, lp, pb, remainder, val;\r\n        if (properties.length < 5)\r\n            return 0;\r\n        val = properties[0] & 255;\r\n        lc = val % 9;\r\n        remainder = ~~(val / 9);\r\n        lp = remainder % 5;\r\n        pb = ~~(remainder / 5);\r\n        dictionarySize = 0;\r\n        for (i = 0; i < 4; ++i) {\r\n            dictionarySize += (properties[1 + i] & 255) << i * 8;\r\n        }\r\n        ///NOTE: If the input is bad, it might call for an insanely large dictionary size, which would crash the script.\r\n        if (dictionarySize > 99999999 || !$SetLcLpPb(this$static, lc, lp, pb)) {\r\n            return 0;\r\n        }\r\n        return $SetDictionarySize(this$static, dictionarySize);\r\n    }\r\n\r\n    function $SetDictionarySize(this$static, dictionarySize) {\r\n        if (dictionarySize < 0) {\r\n            return 0;\r\n        }\r\n        if (this$static.m_DictionarySize != dictionarySize) {\r\n            this$static.m_DictionarySize = dictionarySize;\r\n            this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\r\n            $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    function $SetLcLpPb(this$static, lc, lp, pb) {\r\n        if (lc > 8 || lp > 4 || pb > 4) {\r\n            return 0;\r\n        }\r\n        $Create_0(this$static.m_LiteralDecoder, lp, lc);\r\n        var numPosStates = 1 << pb;\r\n        $Create(this$static.m_LenDecoder, numPosStates);\r\n        $Create(this$static.m_RepLenDecoder, numPosStates);\r\n        this$static.m_PosStateMask = numPosStates - 1;\r\n        return 1;\r\n    }\r\n\r\n    function $Create(this$static, numPosStates) {\r\n        for (; this$static.m_NumPosStates < numPosStates; ++this$static.m_NumPosStates) {\r\n            this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n            this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n        }\r\n    }\r\n\r\n    function $Decode(this$static, rangeDecoder, posState) {\r\n        if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0)) {\r\n            return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\r\n        }\r\n        var symbol = 8;\r\n        if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1)) {\r\n            symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\r\n        } else {\r\n            symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\r\n        }\r\n        return symbol;\r\n    }\r\n\r\n    function $Decoder$LenDecoder(this$static) {\r\n        this$static.m_Choice = initDim(2);\r\n        this$static.m_LowCoder = initDim(16);\r\n        this$static.m_MidCoder = initDim(16);\r\n        this$static.m_HighCoder = $BitTreeDecoder({}, 8);\r\n        this$static.m_NumPosStates = 0;\r\n        return this$static;\r\n    }\r\n\r\n    function $Init(this$static) {\r\n        InitBitModels(this$static.m_Choice);\r\n        for (var posState = 0; posState < this$static.m_NumPosStates; ++posState) {\r\n            InitBitModels(this$static.m_LowCoder[posState].Models);\r\n            InitBitModels(this$static.m_MidCoder[posState].Models);\r\n        }\r\n        InitBitModels(this$static.m_HighCoder.Models);\r\n    }\r\n\r\n\r\n    function $Create_0(this$static, numPosBits, numPrevBits) {\r\n        var i, numStates;\r\n        if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits)\r\n            return;\r\n        this$static.m_NumPosBits = numPosBits;\r\n        this$static.m_PosMask = (1 << numPosBits) - 1;\r\n        this$static.m_NumPrevBits = numPrevBits;\r\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n        this$static.m_Coders = initDim(numStates);\r\n        for (i = 0; i < numStates; ++i)\r\n            this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\r\n    }\r\n\r\n    function $GetDecoder(this$static, pos, prevByte) {\r\n        return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n    }\r\n\r\n    function $Init_0(this$static) {\r\n        var i, numStates;\r\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n        for (i = 0; i < numStates; ++i) {\r\n            InitBitModels(this$static.m_Coders[i].m_Decoders);\r\n        }\r\n    }\r\n\r\n\r\n    function $DecodeNormal(this$static, rangeDecoder) {\r\n        var symbol = 1;\r\n        do {\r\n            symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n        } while (symbol < 256);\r\n        return symbol << 24 >> 24;\r\n    }\r\n\r\n    function $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\r\n        var bit, matchBit, symbol = 1;\r\n        do {\r\n            matchBit = matchByte >> 7 & 1;\r\n            matchByte <<= 1;\r\n            bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\r\n            symbol = symbol << 1 | bit;\r\n            if (matchBit != bit) {\r\n                while (symbol < 256) {\r\n                    symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n                }\r\n                break;\r\n            }\r\n        } while (symbol < 256);\r\n        return symbol << 24 >> 24;\r\n    }\r\n\r\n    function $Decoder$LiteralDecoder$Decoder2(this$static) {\r\n        this$static.m_Decoders = initDim(768);\r\n        return this$static;\r\n    }\r\n\r\n    /** de */\r\n    /** cs */\r\n    var g_FastPos = (function () {\r\n        var j, k, slotFast, c = 2, g_FastPos = [0, 1];\r\n        for (slotFast = 2; slotFast < 22; ++slotFast) {\r\n            k = 1 << (slotFast >> 1) - 1;\r\n            for (j = 0; j < k; ++j , ++c)\r\n                g_FastPos[c] = slotFast << 24 >> 24;\r\n        }\r\n        return g_FastPos;\r\n    }());\r\n\r\n    function $Backward(this$static, cur) {\r\n        var backCur, backMem, posMem, posPrev;\r\n        this$static._optimumEndIndex = cur;\r\n        posMem = this$static._optimum[cur].PosPrev;\r\n        backMem = this$static._optimum[cur].BackPrev;\r\n        do {\r\n            if (this$static._optimum[cur].Prev1IsChar) {\r\n                $MakeAsChar(this$static._optimum[posMem]);\r\n                this$static._optimum[posMem].PosPrev = posMem - 1;\r\n                if (this$static._optimum[cur].Prev2) {\r\n                    this$static._optimum[posMem - 1].Prev1IsChar = 0;\r\n                    this$static._optimum[posMem - 1].PosPrev = this$static._optimum[cur].PosPrev2;\r\n                    this$static._optimum[posMem - 1].BackPrev = this$static._optimum[cur].BackPrev2;\r\n                }\r\n            }\r\n            posPrev = posMem;\r\n            backCur = backMem;\r\n            backMem = this$static._optimum[posPrev].BackPrev;\r\n            posMem = this$static._optimum[posPrev].PosPrev;\r\n            this$static._optimum[posPrev].BackPrev = backCur;\r\n            this$static._optimum[posPrev].PosPrev = cur;\r\n            cur = posPrev;\r\n        } while (cur > 0);\r\n        this$static.backRes = this$static._optimum[0].BackPrev;\r\n        this$static._optimumCurrentIndex = this$static._optimum[0].PosPrev;\r\n        return this$static._optimumCurrentIndex;\r\n    }\r\n\r\n    function $BaseInit(this$static) {\r\n        this$static._state = 0;\r\n        this$static._previousByte = 0;\r\n        for (var i = 0; i < 4; ++i) {\r\n            this$static._repDistances[i] = 0;\r\n        }\r\n    }\r\n\r\n    function $CodeOneBlock(this$static, inSize, outSize, finished) {\r\n        var baseVal, complexState, curByte, distance, footerBits, i, len, lenToPosState, matchByte, pos, posReduced, posSlot, posState, progressPosValuePrev, subCoder;\r\n        inSize[0] = P0_longLit;\r\n        outSize[0] = P0_longLit;\r\n        finished[0] = 1;\r\n        if (this$static._inStream) {\r\n            this$static._matchFinder._stream = this$static._inStream;\r\n            $Init_5(this$static._matchFinder);\r\n            this$static._needReleaseMFStream = 1;\r\n            this$static._inStream = null;\r\n        }\r\n        if (this$static._finished) {\r\n            return;\r\n        }\r\n        this$static._finished = 1;\r\n        progressPosValuePrev = this$static.nowPos64;\r\n        if (eq(this$static.nowPos64, P0_longLit)) {\r\n            if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n                $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n                return;\r\n            }\r\n            $ReadMatchDistances(this$static);\r\n            posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 0);\r\n            this$static._state = StateUpdateChar(this$static._state);\r\n            curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n            $Encode_1($GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte), this$static._rangeEncoder, curByte);\r\n            this$static._previousByte = curByte;\r\n            --this$static._additionalOffset;\r\n            this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n        }\r\n        if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n            $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n            return;\r\n        }\r\n        while (1) {\r\n            len = $GetOptimum(this$static, lowBits_0(this$static.nowPos64));\r\n            pos = this$static.backRes;\r\n            posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n            complexState = (this$static._state << 4) + posState;\r\n            if (len == 1 && pos == -1) {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 0);\r\n                curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n                subCoder = $GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte);\r\n                if (this$static._state < 7) {\r\n                    $Encode_1(subCoder, this$static._rangeEncoder, curByte);\r\n                } else {\r\n                    matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - this$static._additionalOffset);\r\n                    $EncodeMatched(subCoder, this$static._rangeEncoder, matchByte, curByte);\r\n                }\r\n                this$static._previousByte = curByte;\r\n                this$static._state = StateUpdateChar(this$static._state);\r\n            } else {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 1);\r\n                if (pos < 4) {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 1);\r\n                    if (!pos) {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 0);\r\n                        if (len == 1) {\r\n                            $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 0);\r\n                        } else {\r\n                            $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 1);\r\n                        }\r\n                    } else {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 1);\r\n                        if (pos == 1) {\r\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 0);\r\n                        } else {\r\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 1);\r\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG2, this$static._state, pos - 2);\r\n                        }\r\n                    }\r\n                    if (len == 1) {\r\n                        this$static._state = this$static._state < 7?9:11;\r\n                    } else {\r\n                        $Encode_0(this$static._repMatchLenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                        this$static._state = this$static._state < 7?8:11;\r\n                    }\r\n                    distance = this$static._repDistances[pos];\r\n                    if (pos != 0) {\r\n                        for (i = pos; i >= 1; --i) {\r\n                            this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                        }\r\n                        this$static._repDistances[0] = distance;\r\n                    }\r\n                } else {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n                    this$static._state = this$static._state < 7?7:10;\r\n                    $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                    pos -= 4;\r\n                    posSlot = GetPosSlot(pos);\r\n                    lenToPosState = GetLenToPosState(len);\r\n                    $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, posSlot);\r\n                    if (posSlot >= 4) {\r\n                        footerBits = (posSlot >> 1) - 1;\r\n                        baseVal = (2 | posSlot & 1) << footerBits;\r\n                        posReduced = pos - baseVal;\r\n                        if (posSlot < 14) {\r\n                            ReverseEncode(this$static._posEncoders, baseVal - posSlot - 1, this$static._rangeEncoder, footerBits, posReduced);\r\n                        } else {\r\n                            $EncodeDirectBits(this$static._rangeEncoder, posReduced >> 4, footerBits - 4);\r\n                            $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, posReduced & 15);\r\n                            ++this$static._alignPriceCount;\r\n                        }\r\n                    }\r\n                    distance = pos;\r\n                    for (i = 3; i >= 1; --i) {\r\n                        this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                    }\r\n                    this$static._repDistances[0] = distance;\r\n                    ++this$static._matchPriceCount;\r\n                }\r\n                this$static._previousByte = $GetIndexByte(this$static._matchFinder, len - 1 - this$static._additionalOffset);\r\n            }\r\n            this$static._additionalOffset -= len;\r\n            this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n            if (!this$static._additionalOffset) {\r\n                if (this$static._matchPriceCount >= 128) {\r\n                    $FillDistancesPrices(this$static);\r\n                }\r\n                if (this$static._alignPriceCount >= 16) {\r\n                    $FillAlignPrices(this$static);\r\n                }\r\n                inSize[0] = this$static.nowPos64;\r\n                outSize[0] = $GetProcessedSizeAdd(this$static._rangeEncoder);\r\n                if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n                    $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n                    return;\r\n                }\r\n                if (compare(sub(this$static.nowPos64, progressPosValuePrev), [4096, 0]) >= 0) {\r\n                    this$static._finished = 0;\r\n                    finished[0] = 0;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function $Create_2(this$static) {\r\n        var bt, numHashBytes;\r\n        if (!this$static._matchFinder) {\r\n            bt = {};\r\n            numHashBytes = 4;\r\n            if (!this$static._matchFinderType) {\r\n                numHashBytes = 2;\r\n            }\r\n            $SetType(bt, numHashBytes);\r\n            this$static._matchFinder = bt;\r\n        }\r\n        $Create_1(this$static._literalEncoder, this$static._numLiteralPosStateBits, this$static._numLiteralContextBits);\r\n        if (this$static._dictionarySize == this$static._dictionarySizePrev && this$static._numFastBytesPrev == this$static._numFastBytes) {\r\n            return;\r\n        }\r\n        $Create_3(this$static._matchFinder, this$static._dictionarySize, 4096, this$static._numFastBytes, 274);\r\n        this$static._dictionarySizePrev = this$static._dictionarySize;\r\n        this$static._numFastBytesPrev = this$static._numFastBytes;\r\n    }\r\n\r\n    function $Encoder(this$static) {\r\n        var i;\r\n        this$static._repDistances = initDim(4);\r\n        this$static._optimum = [];\r\n        this$static._rangeEncoder = {};\r\n        this$static._isMatch = initDim(192);\r\n        this$static._isRep = initDim(12);\r\n        this$static._isRepG0 = initDim(12);\r\n        this$static._isRepG1 = initDim(12);\r\n        this$static._isRepG2 = initDim(12);\r\n        this$static._isRep0Long = initDim(192);\r\n        this$static._posSlotEncoder = [];\r\n        this$static._posEncoders = initDim(114);\r\n        this$static._posAlignEncoder = $BitTreeEncoder({}, 4);\r\n        this$static._lenEncoder = $Encoder$LenPriceTableEncoder({});\r\n        this$static._repMatchLenEncoder = $Encoder$LenPriceTableEncoder({});\r\n        this$static._literalEncoder = {};\r\n        this$static._matchDistances = [];\r\n        this$static._posSlotPrices = [];\r\n        this$static._distancesPrices = [];\r\n        this$static._alignPrices = initDim(16);\r\n        this$static.reps = initDim(4);\r\n        this$static.repLens = initDim(4);\r\n        this$static.processedInSize = [P0_longLit];\r\n        this$static.processedOutSize = [P0_longLit];\r\n        this$static.finished = [0];\r\n        this$static.properties = initDim(5);\r\n        this$static.tempPrices = initDim(128);\r\n        this$static._longestMatchLength = 0;\r\n        this$static._matchFinderType = 1;\r\n        this$static._numDistancePairs = 0;\r\n        this$static._numFastBytesPrev = -1;\r\n        this$static.backRes = 0;\r\n        for (i = 0; i < 4096; ++i) {\r\n            this$static._optimum[i] = {};\r\n        }\r\n        for (i = 0; i < 4; ++i) {\r\n            this$static._posSlotEncoder[i] = $BitTreeEncoder({}, 6);\r\n        }\r\n        return this$static;\r\n    }\r\n\r\n    function $FillAlignPrices(this$static) {\r\n        for (var i = 0; i < 16; ++i) {\r\n            this$static._alignPrices[i] = $ReverseGetPrice(this$static._posAlignEncoder, i);\r\n        }\r\n        this$static._alignPriceCount = 0;\r\n    }\r\n\r\n    function $FillDistancesPrices(this$static) {\r\n        var baseVal, encoder, footerBits, i, lenToPosState, posSlot, st, st2;\r\n        for (i = 4; i < 128; ++i) {\r\n            posSlot = GetPosSlot(i);\r\n            footerBits = (posSlot >> 1) - 1;\r\n            baseVal = (2 | posSlot & 1) << footerBits;\r\n            this$static.tempPrices[i] = ReverseGetPrice(this$static._posEncoders, baseVal - posSlot - 1, footerBits, i - baseVal);\r\n        }\r\n        for (lenToPosState = 0; lenToPosState < 4; ++lenToPosState) {\r\n            encoder = this$static._posSlotEncoder[lenToPosState];\r\n            st = lenToPosState << 6;\r\n            for (posSlot = 0; posSlot < this$static._distTableSize; ++posSlot) {\r\n                this$static._posSlotPrices[st + posSlot] = $GetPrice_1(encoder, posSlot);\r\n            }\r\n            for (posSlot = 14; posSlot < this$static._distTableSize; ++posSlot) {\r\n                this$static._posSlotPrices[st + posSlot] += (posSlot >> 1) - 1 - 4 << 6;\r\n            }\r\n            st2 = lenToPosState * 128;\r\n            for (i = 0; i < 4; ++i) {\r\n                this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + i];\r\n            }\r\n            for (; i < 128; ++i) {\r\n                this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + GetPosSlot(i)] + this$static.tempPrices[i];\r\n            }\r\n        }\r\n        this$static._matchPriceCount = 0;\r\n    }\r\n\r\n    function $Flush(this$static, nowPos) {\r\n        $ReleaseMFStream(this$static);\r\n        $WriteEndMarker(this$static, nowPos & this$static._posStateMask);\r\n        for (var i = 0; i < 5; ++i) {\r\n            $ShiftLow(this$static._rangeEncoder);\r\n        }\r\n    }\r\n\r\n    function $GetOptimum(this$static, position) {\r\n        var cur, curAnd1Price, curAndLenCharPrice, curAndLenPrice, curBack, curPrice, currentByte, distance, i, len, lenEnd, lenMain, lenRes, lenTest, lenTest2, lenTestTemp, matchByte, matchPrice, newLen, nextIsChar, nextMatchPrice, nextOptimum, nextRepMatchPrice, normalMatchPrice, numAvailableBytes, numAvailableBytesFull, numDistancePairs, offs, offset, opt, optimum, pos, posPrev, posState, posStateNext, price_4, repIndex, repLen, repMatchPrice, repMaxIndex, shortRepPrice, startLen, state, state2, t, price, price_0, price_1, price_2, price_3;\r\n        if (this$static._optimumEndIndex != this$static._optimumCurrentIndex) {\r\n            lenRes = this$static._optimum[this$static._optimumCurrentIndex].PosPrev - this$static._optimumCurrentIndex;\r\n            this$static.backRes = this$static._optimum[this$static._optimumCurrentIndex].BackPrev;\r\n            this$static._optimumCurrentIndex = this$static._optimum[this$static._optimumCurrentIndex].PosPrev;\r\n            return lenRes;\r\n        }\r\n        this$static._optimumCurrentIndex = this$static._optimumEndIndex = 0;\r\n        if (this$static._longestMatchWasFound) {\r\n            lenMain = this$static._longestMatchLength;\r\n            this$static._longestMatchWasFound = 0;\r\n        } else {\r\n            lenMain = $ReadMatchDistances(this$static);\r\n        }\r\n        numDistancePairs = this$static._numDistancePairs;\r\n        numAvailableBytes = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n        if (numAvailableBytes < 2) {\r\n            this$static.backRes = -1;\r\n            return 1;\r\n        }\r\n        if (numAvailableBytes > 273) {\r\n            numAvailableBytes = 273;\r\n        }\r\n        repMaxIndex = 0;\r\n        for (i = 0; i < 4; ++i) {\r\n            this$static.reps[i] = this$static._repDistances[i];\r\n            this$static.repLens[i] = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[i], 273);\r\n            if (this$static.repLens[i] > this$static.repLens[repMaxIndex]) {\r\n                repMaxIndex = i;\r\n            }\r\n        }\r\n        if (this$static.repLens[repMaxIndex] >= this$static._numFastBytes) {\r\n            this$static.backRes = repMaxIndex;\r\n            lenRes = this$static.repLens[repMaxIndex];\r\n            $MovePos(this$static, lenRes - 1);\r\n            return lenRes;\r\n        }\r\n        if (lenMain >= this$static._numFastBytes) {\r\n            this$static.backRes = this$static._matchDistances[numDistancePairs - 1] + 4;\r\n            $MovePos(this$static, lenMain - 1);\r\n            return lenMain;\r\n        }\r\n        currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n        matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - 1);\r\n        if (lenMain < 2 && currentByte != matchByte && this$static.repLens[repMaxIndex] < 2) {\r\n            this$static.backRes = -1;\r\n            return 1;\r\n        }\r\n        this$static._optimum[0].State = this$static._state;\r\n        posState = position & this$static._posStateMask;\r\n        this$static._optimum[1].Price = ProbPrices[this$static._isMatch[(this$static._state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, this$static._previousByte), this$static._state >= 7, matchByte, currentByte);\r\n        $MakeAsChar(this$static._optimum[1]);\r\n        matchPrice = ProbPrices[2048 - this$static._isMatch[(this$static._state << 4) + posState] >>> 2];\r\n        repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[this$static._state] >>> 2];\r\n        if (matchByte == currentByte) {\r\n            shortRepPrice = repMatchPrice + $GetRepLen1Price(this$static, this$static._state, posState);\r\n            if (shortRepPrice < this$static._optimum[1].Price) {\r\n                this$static._optimum[1].Price = shortRepPrice;\r\n                $MakeAsShortRep(this$static._optimum[1]);\r\n            }\r\n        }\r\n        lenEnd = lenMain >= this$static.repLens[repMaxIndex]?lenMain:this$static.repLens[repMaxIndex];\r\n        if (lenEnd < 2) {\r\n            this$static.backRes = this$static._optimum[1].BackPrev;\r\n            return 1;\r\n        }\r\n        this$static._optimum[1].PosPrev = 0;\r\n        this$static._optimum[0].Backs0 = this$static.reps[0];\r\n        this$static._optimum[0].Backs1 = this$static.reps[1];\r\n        this$static._optimum[0].Backs2 = this$static.reps[2];\r\n        this$static._optimum[0].Backs3 = this$static.reps[3];\r\n        len = lenEnd;\r\n        do {\r\n            this$static._optimum[len--].Price = 268435455;\r\n        } while (len >= 2);\r\n        for (i = 0; i < 4; ++i) {\r\n            repLen = this$static.repLens[i];\r\n            if (repLen < 2) {\r\n                continue;\r\n            }\r\n            price_4 = repMatchPrice + $GetPureRepPrice(this$static, i, this$static._state, posState);\r\n            do {\r\n                curAndLenPrice = price_4 + $GetPrice(this$static._repMatchLenEncoder, repLen - 2, posState);\r\n                optimum = this$static._optimum[repLen];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = 0;\r\n                    optimum.BackPrev = i;\r\n                    optimum.Prev1IsChar = 0;\r\n                }\r\n            } while (--repLen >= 2);\r\n        }\r\n        normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[this$static._state] >>> 2];\r\n        len = this$static.repLens[0] >= 2?this$static.repLens[0] + 1:2;\r\n        if (len <= lenMain) {\r\n            offs = 0;\r\n            while (len > this$static._matchDistances[offs]) {\r\n                offs += 2;\r\n            }\r\n            for (;; ++len) {\r\n                distance = this$static._matchDistances[offs + 1];\r\n                curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, distance, len, posState);\r\n                optimum = this$static._optimum[len];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = 0;\r\n                    optimum.BackPrev = distance + 4;\r\n                    optimum.Prev1IsChar = 0;\r\n                }\r\n                if (len == this$static._matchDistances[offs]) {\r\n                    offs += 2;\r\n                    if (offs == numDistancePairs) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        cur = 0;\r\n        while (1) {\r\n            ++cur;\r\n            if (cur == lenEnd) {\r\n                return $Backward(this$static, cur);\r\n            }\r\n            newLen = $ReadMatchDistances(this$static);\r\n            numDistancePairs = this$static._numDistancePairs;\r\n            if (newLen >= this$static._numFastBytes) {\r\n                this$static._longestMatchLength = newLen;\r\n                this$static._longestMatchWasFound = 1;\r\n                return $Backward(this$static, cur);\r\n            }\r\n            ++position;\r\n            posPrev = this$static._optimum[cur].PosPrev;\r\n            if (this$static._optimum[cur].Prev1IsChar) {\r\n                --posPrev;\r\n                if (this$static._optimum[cur].Prev2) {\r\n                    state = this$static._optimum[this$static._optimum[cur].PosPrev2].State;\r\n                    if (this$static._optimum[cur].BackPrev2 < 4) {\r\n                        state = (state < 7) ? 8 : 11;\r\n                    } else {\r\n                        state = (state < 7) ? 7 : 10;\r\n                    }\r\n                } else {\r\n                    state = this$static._optimum[posPrev].State;\r\n                }\r\n                state = StateUpdateChar(state);\r\n            } else {\r\n                state = this$static._optimum[posPrev].State;\r\n            }\r\n            if (posPrev == cur - 1) {\r\n                if (!this$static._optimum[cur].BackPrev) {\r\n                    state = state < 7?9:11;\r\n                } else {\r\n                    state = StateUpdateChar(state);\r\n                }\r\n            } else {\r\n                if (this$static._optimum[cur].Prev1IsChar && this$static._optimum[cur].Prev2) {\r\n                    posPrev = this$static._optimum[cur].PosPrev2;\r\n                    pos = this$static._optimum[cur].BackPrev2;\r\n                    state = state < 7?8:11;\r\n                } else {\r\n                    pos = this$static._optimum[cur].BackPrev;\r\n                    if (pos < 4) {\r\n                        state = state < 7?8:11;\r\n                    } else {\r\n                        state = state < 7?7:10;\r\n                    }\r\n                }\r\n                opt = this$static._optimum[posPrev];\r\n                if (pos < 4) {\r\n                    if (!pos) {\r\n                        this$static.reps[0] = opt.Backs0;\r\n                        this$static.reps[1] = opt.Backs1;\r\n                        this$static.reps[2] = opt.Backs2;\r\n                        this$static.reps[3] = opt.Backs3;\r\n                    } else if (pos == 1) {\r\n                        this$static.reps[0] = opt.Backs1;\r\n                        this$static.reps[1] = opt.Backs0;\r\n                        this$static.reps[2] = opt.Backs2;\r\n                        this$static.reps[3] = opt.Backs3;\r\n                    } else if (pos == 2) {\r\n                        this$static.reps[0] = opt.Backs2;\r\n                        this$static.reps[1] = opt.Backs0;\r\n                        this$static.reps[2] = opt.Backs1;\r\n                        this$static.reps[3] = opt.Backs3;\r\n                    } else {\r\n                        this$static.reps[0] = opt.Backs3;\r\n                        this$static.reps[1] = opt.Backs0;\r\n                        this$static.reps[2] = opt.Backs1;\r\n                        this$static.reps[3] = opt.Backs2;\r\n                    }\r\n                } else {\r\n                    this$static.reps[0] = pos - 4;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs1;\r\n                    this$static.reps[3] = opt.Backs2;\r\n                }\r\n            }\r\n            this$static._optimum[cur].State = state;\r\n            this$static._optimum[cur].Backs0 = this$static.reps[0];\r\n            this$static._optimum[cur].Backs1 = this$static.reps[1];\r\n            this$static._optimum[cur].Backs2 = this$static.reps[2];\r\n            this$static._optimum[cur].Backs3 = this$static.reps[3];\r\n            curPrice = this$static._optimum[cur].Price;\r\n            currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n            matchByte = $GetIndexByte(this$static._matchFinder, -this$static.reps[0] - 1 - 1);\r\n            posState = position & this$static._posStateMask;\r\n            curAnd1Price = curPrice + ProbPrices[this$static._isMatch[(state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, $GetIndexByte(this$static._matchFinder, -2)), state >= 7, matchByte, currentByte);\r\n            nextOptimum = this$static._optimum[cur + 1];\r\n            nextIsChar = 0;\r\n            if (curAnd1Price < nextOptimum.Price) {\r\n                nextOptimum.Price = curAnd1Price;\r\n                nextOptimum.PosPrev = cur;\r\n                nextOptimum.BackPrev = -1;\r\n                nextOptimum.Prev1IsChar = 0;\r\n                nextIsChar = 1;\r\n            }\r\n            matchPrice = curPrice + ProbPrices[2048 - this$static._isMatch[(state << 4) + posState] >>> 2];\r\n            repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[state] >>> 2];\r\n            if (matchByte == currentByte && !(nextOptimum.PosPrev < cur && !nextOptimum.BackPrev)) {\r\n                shortRepPrice = repMatchPrice + (ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2]);\r\n                if (shortRepPrice <= nextOptimum.Price) {\r\n                    nextOptimum.Price = shortRepPrice;\r\n                    nextOptimum.PosPrev = cur;\r\n                    nextOptimum.BackPrev = 0;\r\n                    nextOptimum.Prev1IsChar = 0;\r\n                    nextIsChar = 1;\r\n                }\r\n            }\r\n            numAvailableBytesFull = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n            numAvailableBytesFull = 4095 - cur < numAvailableBytesFull?4095 - cur:numAvailableBytesFull;\r\n            numAvailableBytes = numAvailableBytesFull;\r\n            if (numAvailableBytes < 2) {\r\n                continue;\r\n            }\r\n            if (numAvailableBytes > this$static._numFastBytes) {\r\n                numAvailableBytes = this$static._numFastBytes;\r\n            }\r\n            if (!nextIsChar && matchByte != currentByte) {\r\n                t = Math.min(numAvailableBytesFull - 1, this$static._numFastBytes);\r\n                lenTest2 = $GetMatchLen(this$static._matchFinder, 0, this$static.reps[0], t);\r\n                if (lenTest2 >= 2) {\r\n                    state2 = StateUpdateChar(state);\r\n                    posStateNext = position + 1 & this$static._posStateMask;\r\n                    nextRepMatchPrice = curAnd1Price + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                    offset = cur + 1 + lenTest2;\r\n                    while (lenEnd < offset) {\r\n                        this$static._optimum[++lenEnd].Price = 268435455;\r\n                    }\r\n                    curAndLenPrice = nextRepMatchPrice + (price = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                    optimum = this$static._optimum[offset];\r\n                    if (curAndLenPrice < optimum.Price) {\r\n                        optimum.Price = curAndLenPrice;\r\n                        optimum.PosPrev = cur + 1;\r\n                        optimum.BackPrev = 0;\r\n                        optimum.Prev1IsChar = 1;\r\n                        optimum.Prev2 = 0;\r\n                    }\r\n                }\r\n            }\r\n            startLen = 2;\r\n            for (repIndex = 0; repIndex < 4; ++repIndex) {\r\n                lenTest = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[repIndex], numAvailableBytes);\r\n                if (lenTest < 2) {\r\n                    continue;\r\n                }\r\n                lenTestTemp = lenTest;\r\n                do {\r\n                    while (lenEnd < cur + lenTest) {\r\n                        this$static._optimum[++lenEnd].Price = 268435455;\r\n                    }\r\n                    curAndLenPrice = repMatchPrice + (price_0 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_0 + $GetPureRepPrice(this$static, repIndex, state, posState));\r\n                    optimum = this$static._optimum[cur + lenTest];\r\n                    if (curAndLenPrice < optimum.Price) {\r\n                        optimum.Price = curAndLenPrice;\r\n                        optimum.PosPrev = cur;\r\n                        optimum.BackPrev = repIndex;\r\n                        optimum.Prev1IsChar = 0;\r\n                    }\r\n                } while (--lenTest >= 2);\r\n                lenTest = lenTestTemp;\r\n                if (!repIndex) {\r\n                    startLen = lenTest + 1;\r\n                }\r\n                if (lenTest < numAvailableBytesFull) {\r\n                    t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                    lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, this$static.reps[repIndex], t);\r\n                    if (lenTest2 >= 2) {\r\n                        state2 = state < 7?8:11;\r\n                        posStateNext = position + lenTest & this$static._posStateMask;\r\n                        curAndLenCharPrice = repMatchPrice + (price_1 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_1 + $GetPureRepPrice(this$static, repIndex, state, posState)) + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - 1 - (this$static.reps[repIndex] + 1)), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                        state2 = StateUpdateChar(state2);\r\n                        posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                        nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                        nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                        offset = lenTest + 1 + lenTest2;\r\n                        while (lenEnd < cur + offset) {\r\n                            this$static._optimum[++lenEnd].Price = 268435455;\r\n                        }\r\n                        curAndLenPrice = nextRepMatchPrice + (price_2 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_2 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                        optimum = this$static._optimum[cur + offset];\r\n                        if (curAndLenPrice < optimum.Price) {\r\n                            optimum.Price = curAndLenPrice;\r\n                            optimum.PosPrev = cur + lenTest + 1;\r\n                            optimum.BackPrev = 0;\r\n                            optimum.Prev1IsChar = 1;\r\n                            optimum.Prev2 = 1;\r\n                            optimum.PosPrev2 = cur;\r\n                            optimum.BackPrev2 = repIndex;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (newLen > numAvailableBytes) {\r\n                newLen = numAvailableBytes;\r\n                for (numDistancePairs = 0; newLen > this$static._matchDistances[numDistancePairs]; numDistancePairs += 2) {}\r\n                this$static._matchDistances[numDistancePairs] = newLen;\r\n                numDistancePairs += 2;\r\n            }\r\n            if (newLen >= startLen) {\r\n                normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[state] >>> 2];\r\n                while (lenEnd < cur + newLen) {\r\n                    this$static._optimum[++lenEnd].Price = 268435455;\r\n                }\r\n                offs = 0;\r\n                while (startLen > this$static._matchDistances[offs]) {\r\n                    offs += 2;\r\n                }\r\n                for (lenTest = startLen;; ++lenTest) {\r\n                    curBack = this$static._matchDistances[offs + 1];\r\n                    curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, curBack, lenTest, posState);\r\n                    optimum = this$static._optimum[cur + lenTest];\r\n                    if (curAndLenPrice < optimum.Price) {\r\n                        optimum.Price = curAndLenPrice;\r\n                        optimum.PosPrev = cur;\r\n                        optimum.BackPrev = curBack + 4;\r\n                        optimum.Prev1IsChar = 0;\r\n                    }\r\n                    if (lenTest == this$static._matchDistances[offs]) {\r\n                        if (lenTest < numAvailableBytesFull) {\r\n                            t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                            lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, curBack, t);\r\n                            if (lenTest2 >= 2) {\r\n                                state2 = state < 7?7:10;\r\n                                posStateNext = position + lenTest & this$static._posStateMask;\r\n                                curAndLenCharPrice = curAndLenPrice + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - (curBack + 1) - 1), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                                state2 = StateUpdateChar(state2);\r\n                                posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                                nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                                nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                                offset = lenTest + 1 + lenTest2;\r\n                                while (lenEnd < cur + offset) {\r\n                                    this$static._optimum[++lenEnd].Price = 268435455;\r\n                                }\r\n                                curAndLenPrice = nextRepMatchPrice + (price_3 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_3 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                                optimum = this$static._optimum[cur + offset];\r\n                                if (curAndLenPrice < optimum.Price) {\r\n                                    optimum.Price = curAndLenPrice;\r\n                                    optimum.PosPrev = cur + lenTest + 1;\r\n                                    optimum.BackPrev = 0;\r\n                                    optimum.Prev1IsChar = 1;\r\n                                    optimum.Prev2 = 1;\r\n                                    optimum.PosPrev2 = cur;\r\n                                    optimum.BackPrev2 = curBack + 4;\r\n                                }\r\n                            }\r\n                        }\r\n                        offs += 2;\r\n                        if (offs == numDistancePairs)\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function $GetPosLenPrice(this$static, pos, len, posState) {\r\n        var price, lenToPosState = GetLenToPosState(len);\r\n        if (pos < 128) {\r\n            price = this$static._distancesPrices[lenToPosState * 128 + pos];\r\n        } else {\r\n            price = this$static._posSlotPrices[(lenToPosState << 6) + GetPosSlot2(pos)] + this$static._alignPrices[pos & 15];\r\n        }\r\n        return price + $GetPrice(this$static._lenEncoder, len - 2, posState);\r\n    }\r\n\r\n    function $GetPureRepPrice(this$static, repIndex, state, posState) {\r\n        var price;\r\n        if (!repIndex) {\r\n            price = ProbPrices[this$static._isRepG0[state] >>> 2];\r\n            price += ProbPrices[2048 - this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n        } else {\r\n            price = ProbPrices[2048 - this$static._isRepG0[state] >>> 2];\r\n            if (repIndex == 1) {\r\n                price += ProbPrices[this$static._isRepG1[state] >>> 2];\r\n            } else {\r\n                price += ProbPrices[2048 - this$static._isRepG1[state] >>> 2];\r\n                price += GetPrice(this$static._isRepG2[state], repIndex - 2);\r\n            }\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function $GetRepLen1Price(this$static, state, posState) {\r\n        return ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n    }\r\n\r\n    function $Init_4(this$static) {\r\n        $BaseInit(this$static);\r\n        $Init_9(this$static._rangeEncoder);\r\n        InitBitModels(this$static._isMatch);\r\n        InitBitModels(this$static._isRep0Long);\r\n        InitBitModels(this$static._isRep);\r\n        InitBitModels(this$static._isRepG0);\r\n        InitBitModels(this$static._isRepG1);\r\n        InitBitModels(this$static._isRepG2);\r\n        InitBitModels(this$static._posEncoders);\r\n        $Init_3(this$static._literalEncoder);\r\n        for (var i = 0; i < 4; ++i) {\r\n            InitBitModels(this$static._posSlotEncoder[i].Models);\r\n        }\r\n        $Init_2(this$static._lenEncoder, 1 << this$static._posStateBits);\r\n        $Init_2(this$static._repMatchLenEncoder, 1 << this$static._posStateBits);\r\n        InitBitModels(this$static._posAlignEncoder.Models);\r\n        this$static._longestMatchWasFound = 0;\r\n        this$static._optimumEndIndex = 0;\r\n        this$static._optimumCurrentIndex = 0;\r\n        this$static._additionalOffset = 0;\r\n    }\r\n\r\n    function $MovePos(this$static, num) {\r\n        if (num > 0) {\r\n            $Skip(this$static._matchFinder, num);\r\n            this$static._additionalOffset += num;\r\n        }\r\n    }\r\n\r\n    function $ReadMatchDistances(this$static) {\r\n        var lenRes = 0;\r\n        this$static._numDistancePairs = $GetMatches(this$static._matchFinder, this$static._matchDistances);\r\n        if (this$static._numDistancePairs > 0) {\r\n            lenRes = this$static._matchDistances[this$static._numDistancePairs - 2];\r\n            if (lenRes == this$static._numFastBytes)\r\n                lenRes += $GetMatchLen(this$static._matchFinder, lenRes - 1, this$static._matchDistances[this$static._numDistancePairs - 1], 273 - lenRes);\r\n        }\r\n        ++this$static._additionalOffset;\r\n        return lenRes;\r\n    }\r\n\r\n    function $ReleaseMFStream(this$static) {\r\n        if (this$static._matchFinder && this$static._needReleaseMFStream) {\r\n            this$static._matchFinder._stream = null;\r\n            this$static._needReleaseMFStream = 0;\r\n        }\r\n    }\r\n\r\n    function $ReleaseStreams(this$static) {\r\n        $ReleaseMFStream(this$static);\r\n        this$static._rangeEncoder.Stream = null;\r\n    }\r\n\r\n    function $SetDictionarySize_0(this$static, dictionarySize) {\r\n        this$static._dictionarySize = dictionarySize;\r\n        for (var dicLogSize = 0; dictionarySize > 1 << dicLogSize; ++dicLogSize) {}\r\n        this$static._distTableSize = dicLogSize * 2;\r\n    }\r\n\r\n    function $SetMatchFinder(this$static, matchFinderIndex) {\r\n        var matchFinderIndexPrev = this$static._matchFinderType;\r\n        this$static._matchFinderType = matchFinderIndex;\r\n        if (this$static._matchFinder && matchFinderIndexPrev != this$static._matchFinderType) {\r\n            this$static._dictionarySizePrev = -1;\r\n            this$static._matchFinder = null;\r\n        }\r\n    }\r\n\r\n    function $WriteCoderProperties(this$static, outStream) {\r\n        this$static.properties[0] = (this$static._posStateBits * 5 + this$static._numLiteralPosStateBits) * 9 + this$static._numLiteralContextBits << 24 >> 24;\r\n        for (var i = 0; i < 4; ++i) {\r\n            this$static.properties[1 + i] = this$static._dictionarySize >> 8 * i << 24 >> 24;\r\n        }\r\n        $write_0(outStream, this$static.properties, 0, 5);\r\n    }\r\n\r\n    function $WriteEndMarker(this$static, posState) {\r\n        if (!this$static._writeEndMark) {\r\n            return;\r\n        }\r\n        $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 1);\r\n        $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n        this$static._state = this$static._state < 7?7:10;\r\n        $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, 0, posState);\r\n        var lenToPosState = GetLenToPosState(2);\r\n        $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, 63);\r\n        $EncodeDirectBits(this$static._rangeEncoder, 67108863, 26);\r\n        $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, 15);\r\n    }\r\n\r\n    function GetPosSlot(pos) {\r\n        if (pos < 2048) {\r\n            return g_FastPos[pos];\r\n        }\r\n        if (pos < 2097152) {\r\n            return g_FastPos[pos >> 10] + 20;\r\n        }\r\n        return g_FastPos[pos >> 20] + 40;\r\n    }\r\n\r\n    function GetPosSlot2(pos) {\r\n        if (pos < 131072) {\r\n            return g_FastPos[pos >> 6] + 12;\r\n        }\r\n        if (pos < 134217728) {\r\n            return g_FastPos[pos >> 16] + 32;\r\n        }\r\n        return g_FastPos[pos >> 26] + 52;\r\n    }\r\n\r\n    function $Encode(this$static, rangeEncoder, symbol, posState) {\r\n        if (symbol < 8) {\r\n            $Encode_3(rangeEncoder, this$static._choice, 0, 0);\r\n            $Encode_2(this$static._lowCoder[posState], rangeEncoder, symbol);\r\n        } else {\r\n            symbol -= 8;\r\n            $Encode_3(rangeEncoder, this$static._choice, 0, 1);\r\n            if (symbol < 8) {\r\n                $Encode_3(rangeEncoder, this$static._choice, 1, 0);\r\n                $Encode_2(this$static._midCoder[posState], rangeEncoder, symbol);\r\n            } else {\r\n                $Encode_3(rangeEncoder, this$static._choice, 1, 1);\r\n                $Encode_2(this$static._highCoder, rangeEncoder, symbol - 8);\r\n            }\r\n        }\r\n    }\r\n\r\n    function $Encoder$LenEncoder(this$static) {\r\n        this$static._choice = initDim(2);\r\n        this$static._lowCoder = initDim(16);\r\n        this$static._midCoder = initDim(16);\r\n        this$static._highCoder = $BitTreeEncoder({}, 8);\r\n        for (var posState = 0; posState < 16; ++posState) {\r\n            this$static._lowCoder[posState] = $BitTreeEncoder({}, 3);\r\n            this$static._midCoder[posState] = $BitTreeEncoder({}, 3);\r\n        }\r\n        return this$static;\r\n    }\r\n\r\n    function $Init_2(this$static, numPosStates) {\r\n        InitBitModels(this$static._choice);\r\n        for (var posState = 0; posState < numPosStates; ++posState) {\r\n            InitBitModels(this$static._lowCoder[posState].Models);\r\n            InitBitModels(this$static._midCoder[posState].Models);\r\n        }\r\n        InitBitModels(this$static._highCoder.Models);\r\n    }\r\n\r\n    function $SetPrices(this$static, posState, numSymbols, prices, st) {\r\n        var a0, a1, b0, b1, i;\r\n        a0 = ProbPrices[this$static._choice[0] >>> 2];\r\n        a1 = ProbPrices[2048 - this$static._choice[0] >>> 2];\r\n        b0 = a1 + ProbPrices[this$static._choice[1] >>> 2];\r\n        b1 = a1 + ProbPrices[2048 - this$static._choice[1] >>> 2];\r\n        i = 0;\r\n        for (i = 0; i < 8; ++i) {\r\n            if (i >= numSymbols)\r\n                return;\r\n            prices[st + i] = a0 + $GetPrice_1(this$static._lowCoder[posState], i);\r\n        }\r\n        for (; i < 16; ++i) {\r\n            if (i >= numSymbols)\r\n                return;\r\n            prices[st + i] = b0 + $GetPrice_1(this$static._midCoder[posState], i - 8);\r\n        }\r\n        for (; i < numSymbols; ++i) {\r\n            prices[st + i] = b1 + $GetPrice_1(this$static._highCoder, i - 8 - 8);\r\n        }\r\n    }\r\n\r\n    function $Encode_0(this$static, rangeEncoder, symbol, posState) {\r\n        $Encode(this$static, rangeEncoder, symbol, posState);\r\n        if (--this$static._counters[posState] == 0) {\r\n            $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n            this$static._counters[posState] = this$static._tableSize;\r\n        }\r\n    }\r\n\r\n    function $Encoder$LenPriceTableEncoder(this$static) {\r\n        $Encoder$LenEncoder(this$static);\r\n        this$static._prices = [];\r\n        this$static._counters = [];\r\n        return this$static;\r\n    }\r\n\r\n    function $GetPrice(this$static, symbol, posState) {\r\n        return this$static._prices[posState * 272 + symbol];\r\n    }\r\n\r\n    function $UpdateTables(this$static, numPosStates) {\r\n        for (var posState = 0; posState < numPosStates; ++posState) {\r\n            $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n            this$static._counters[posState] = this$static._tableSize;\r\n        }\r\n    }\r\n\r\n    function $Create_1(this$static, numPosBits, numPrevBits) {\r\n        var i, numStates;\r\n        if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits) {\r\n            return;\r\n        }\r\n        this$static.m_NumPosBits = numPosBits;\r\n        this$static.m_PosMask = (1 << numPosBits) - 1;\r\n        this$static.m_NumPrevBits = numPrevBits;\r\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n        this$static.m_Coders = initDim(numStates);\r\n        for (i = 0; i < numStates; ++i) {\r\n            this$static.m_Coders[i] = $Encoder$LiteralEncoder$Encoder2({});\r\n        }\r\n    }\r\n\r\n    function $GetSubCoder(this$static, pos, prevByte) {\r\n        return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n    }\r\n\r\n    function $Init_3(this$static) {\r\n        var i, numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n        for (i = 0; i < numStates; ++i) {\r\n            InitBitModels(this$static.m_Coders[i].m_Encoders);\r\n        }\r\n    }\r\n\r\n    function $Encode_1(this$static, rangeEncoder, symbol) {\r\n        var bit, i, context = 1;\r\n        for (i = 7; i >= 0; --i) {\r\n            bit = symbol >> i & 1;\r\n            $Encode_3(rangeEncoder, this$static.m_Encoders, context, bit);\r\n            context = context << 1 | bit;\r\n        }\r\n    }\r\n\r\n    function $EncodeMatched(this$static, rangeEncoder, matchByte, symbol) {\r\n        var bit, i, matchBit, state, same = 1, context = 1;\r\n        for (i = 7; i >= 0; --i) {\r\n            bit = symbol >> i & 1;\r\n            state = context;\r\n            if (same) {\r\n                matchBit = matchByte >> i & 1;\r\n                state += 1 + matchBit << 8;\r\n                same = matchBit == bit;\r\n            }\r\n            $Encode_3(rangeEncoder, this$static.m_Encoders, state, bit);\r\n            context = context << 1 | bit;\r\n        }\r\n    }\r\n\r\n    function $Encoder$LiteralEncoder$Encoder2(this$static) {\r\n        this$static.m_Encoders = initDim(768);\r\n        return this$static;\r\n    }\r\n\r\n    function $GetPrice_0(this$static, matchMode, matchByte, symbol) {\r\n        var bit, context = 1, i = 7, matchBit, price = 0;\r\n        if (matchMode) {\r\n            for (; i >= 0; --i) {\r\n                matchBit = matchByte >> i & 1;\r\n                bit = symbol >> i & 1;\r\n                price += GetPrice(this$static.m_Encoders[(1 + matchBit << 8) + context], bit);\r\n                context = context << 1 | bit;\r\n                if (matchBit != bit) {\r\n                    --i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (; i >= 0; --i) {\r\n            bit = symbol >> i & 1;\r\n            price += GetPrice(this$static.m_Encoders[context], bit);\r\n            context = context << 1 | bit;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function $MakeAsChar(this$static) {\r\n        this$static.BackPrev = -1;\r\n        this$static.Prev1IsChar = 0;\r\n    }\r\n\r\n    function $MakeAsShortRep(this$static) {\r\n        this$static.BackPrev = 0;\r\n        this$static.Prev1IsChar = 0;\r\n    }\r\n    /** ce */\r\n    /** ds */\r\n    function $BitTreeDecoder(this$static, numBitLevels) {\r\n        this$static.NumBitLevels = numBitLevels;\r\n        this$static.Models = initDim(1 << numBitLevels);\r\n        return this$static;\r\n    }\r\n\r\n    function $Decode_0(this$static, rangeDecoder) {\r\n        var bitIndex, m = 1;\r\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0; --bitIndex) {\r\n            m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\r\n        }\r\n        return m - (1 << this$static.NumBitLevels);\r\n    }\r\n\r\n    function $ReverseDecode(this$static, rangeDecoder) {\r\n        var bit, bitIndex, m = 1, symbol = 0;\r\n        for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\r\n            bit = $DecodeBit(rangeDecoder, this$static.Models, m);\r\n            m <<= 1;\r\n            m += bit;\r\n            symbol |= bit << bitIndex;\r\n        }\r\n        return symbol;\r\n    }\r\n\r\n    function ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\r\n        var bit, bitIndex, m = 1, symbol = 0;\r\n        for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\r\n            bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\r\n            m <<= 1;\r\n            m += bit;\r\n            symbol |= bit << bitIndex;\r\n        }\r\n        return symbol;\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    function $BitTreeEncoder(this$static, numBitLevels) {\r\n        this$static.NumBitLevels = numBitLevels;\r\n        this$static.Models = initDim(1 << numBitLevels);\r\n        return this$static;\r\n    }\r\n\r\n    function $Encode_2(this$static, rangeEncoder, symbol) {\r\n        var bit, bitIndex, m = 1;\r\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n            --bitIndex;\r\n            bit = symbol >>> bitIndex & 1;\r\n            $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n            m = m << 1 | bit;\r\n        }\r\n    }\r\n\r\n    function $GetPrice_1(this$static, symbol) {\r\n        var bit, bitIndex, m = 1, price = 0;\r\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n            --bitIndex;\r\n            bit = symbol >>> bitIndex & 1;\r\n            price += GetPrice(this$static.Models[m], bit);\r\n            m = (m << 1) + bit;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function $ReverseEncode(this$static, rangeEncoder, symbol) {\r\n        var bit, i, m = 1;\r\n        for (i = 0; i < this$static.NumBitLevels; ++i) {\r\n            bit = symbol & 1;\r\n            $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n            m = m << 1 | bit;\r\n            symbol >>= 1;\r\n        }\r\n    }\r\n\r\n    function $ReverseGetPrice(this$static, symbol) {\r\n        var bit, i, m = 1, price = 0;\r\n        for (i = this$static.NumBitLevels; i != 0; --i) {\r\n            bit = symbol & 1;\r\n            symbol >>>= 1;\r\n            price += GetPrice(this$static.Models[m], bit);\r\n            m = m << 1 | bit;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function ReverseEncode(Models, startIndex, rangeEncoder, NumBitLevels, symbol) {\r\n        var bit, i, m = 1;\r\n        for (i = 0; i < NumBitLevels; ++i) {\r\n            bit = symbol & 1;\r\n            $Encode_3(rangeEncoder, Models, startIndex + m, bit);\r\n            m = m << 1 | bit;\r\n            symbol >>= 1;\r\n        }\r\n    }\r\n\r\n    function ReverseGetPrice(Models, startIndex, NumBitLevels, symbol) {\r\n        var bit, i, m = 1, price = 0;\r\n        for (i = NumBitLevels; i != 0; --i) {\r\n            bit = symbol & 1;\r\n            symbol >>>= 1;\r\n            price += ProbPrices[((Models[startIndex + m] - bit ^ -bit) & 2047) >>> 2];\r\n            m = m << 1 | bit;\r\n        }\r\n        return price;\r\n    }\r\n    /** ce */\r\n    /** ds */\r\n    function $DecodeBit(this$static, probs, index) {\r\n        var newBound, prob = probs[index];\r\n        newBound = (this$static.Range >>> 11) * prob;\r\n        if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\r\n            this$static.Range = newBound;\r\n            probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n            if (!(this$static.Range & -16777216)) {\r\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n                this$static.Range <<= 8;\r\n            }\r\n            return 0;\r\n        } else {\r\n            this$static.Range -= newBound;\r\n            this$static.Code -= newBound;\r\n            probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n            if (!(this$static.Range & -16777216)) {\r\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n                this$static.Range <<= 8;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    function $DecodeDirectBits(this$static, numTotalBits) {\r\n        var i, t, result = 0;\r\n        for (i = numTotalBits; i != 0; --i) {\r\n            this$static.Range >>>= 1;\r\n            t = this$static.Code - this$static.Range >>> 31;\r\n            this$static.Code -= this$static.Range & t - 1;\r\n            result = result << 1 | 1 - t;\r\n            if (!(this$static.Range & -16777216)) {\r\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n                this$static.Range <<= 8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function $Init_8(this$static) {\r\n        this$static.Code = 0;\r\n        this$static.Range = -1;\r\n        for (var i = 0; i < 5; ++i) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n        }\r\n    }\r\n    /** de */\r\n\r\n    function InitBitModels(probs) {\r\n        for (var i = probs.length - 1; i >= 0; --i) {\r\n            probs[i] = 1024;\r\n        }\r\n    }\r\n    /** cs */\r\n    var ProbPrices = (function () {\r\n        var end, i, j, start, ProbPrices = [];\r\n        for (i = 8; i >= 0; --i) {\r\n            start = 1 << 9 - i - 1;\r\n            end = 1 << 9 - i;\r\n            for (j = start; j < end; ++j) {\r\n                ProbPrices[j] = (i << 6) + (end - j << 6 >>> 9 - i - 1);\r\n            }\r\n        }\r\n        return ProbPrices;\r\n    }());\r\n\r\n    function $Encode_3(this$static, probs, index, symbol) {\r\n        var newBound, prob = probs[index];\r\n        newBound = (this$static.Range >>> 11) * prob;\r\n        if (!symbol) {\r\n            this$static.Range = newBound;\r\n            probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n        } else {\r\n            this$static.Low = add(this$static.Low, and(fromInt(newBound), [4294967295, 0]));\r\n            this$static.Range -= newBound;\r\n            probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n        }\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Range <<= 8;\r\n            $ShiftLow(this$static);\r\n        }\r\n    }\r\n\r\n    function $EncodeDirectBits(this$static, v, numTotalBits) {\r\n        for (var i = numTotalBits - 1; i >= 0; --i) {\r\n            this$static.Range >>>= 1;\r\n            if ((v >>> i & 1) == 1) {\r\n                this$static.Low = add(this$static.Low, fromInt(this$static.Range));\r\n            }\r\n            if (!(this$static.Range & -16777216)) {\r\n                this$static.Range <<= 8;\r\n                $ShiftLow(this$static);\r\n            }\r\n        }\r\n    }\r\n\r\n    function $GetProcessedSizeAdd(this$static) {\r\n        return add(add(fromInt(this$static._cacheSize), this$static._position), [4, 0]);\r\n    }\r\n\r\n    function $Init_9(this$static) {\r\n        this$static._position = P0_longLit;\r\n        this$static.Low = P0_longLit;\r\n        this$static.Range = -1;\r\n        this$static._cacheSize = 1;\r\n        this$static._cache = 0;\r\n    }\r\n\r\n    function $ShiftLow(this$static) {\r\n        var temp, LowHi = lowBits_0(shru(this$static.Low, 32));\r\n        if (LowHi != 0 || compare(this$static.Low, [4278190080, 0]) < 0) {\r\n            this$static._position = add(this$static._position, fromInt(this$static._cacheSize));\r\n            temp = this$static._cache;\r\n            do {\r\n                $write(this$static.Stream, temp + LowHi);\r\n                temp = 255;\r\n            } while (--this$static._cacheSize != 0);\r\n            this$static._cache = lowBits_0(this$static.Low) >>> 24;\r\n        }\r\n        ++this$static._cacheSize;\r\n        this$static.Low = shl(and(this$static.Low, [16777215, 0]), 8);\r\n    }\r\n\r\n    function GetPrice(Prob, symbol) {\r\n        return ProbPrices[((Prob - symbol ^ -symbol) & 2047) >>> 2];\r\n    }\r\n\r\n    /** ce */\r\n    /** ds */\r\n    function decode(utf) {\r\n        var i = 0, j = 0, x, y, z, l = utf.length, buf = [], charCodes = [];\r\n        for (; i < l; ++i, ++j) {\r\n            x = utf[i] & 255;\r\n            if (!(x & 128)) {\r\n                if (!x) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                charCodes[j] = x;\r\n            } else if ((x & 224) == 192) {\r\n                if (i + 1 >= l) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                y = utf[++i] & 255;\r\n                if ((y & 192) != 128) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                charCodes[j] = ((x & 31) << 6) | (y & 63);\r\n            } else if ((x & 240) == 224) {\r\n                if (i + 2 >= l) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                y = utf[++i] & 255;\r\n                if ((y & 192) != 128) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                z = utf[++i] & 255;\r\n                if ((z & 192) != 128) {\r\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                    return utf;\r\n                }\r\n                charCodes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);\r\n            } else {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            if (j == 16383) {\r\n                buf.push(String.fromCharCode.apply(String, charCodes));\r\n                j = -1;\r\n            }\r\n        }\r\n        if (j > 0) {\r\n            charCodes.length = j;\r\n            buf.push(String.fromCharCode.apply(String, charCodes));\r\n        }\r\n        return buf.join(\"\");\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    function encode(s) {\r\n        var ch, chars = [], data, elen = 0, i, l = s.length;\r\n        /// Be able to handle binary arrays and buffers.\r\n        if (typeof s == \"object\") {\r\n            return s;\r\n        } else {\r\n            $getChars(s, 0, l, chars, 0);\r\n        }\r\n        /// Add extra spaces in the array to break up the unicode symbols.\r\n        for (i = 0; i < l; ++i) {\r\n            ch = chars[i];\r\n            if (ch >= 1 && ch <= 127) {\r\n                ++elen;\r\n            } else if (!ch || ch >= 128 && ch <= 2047) {\r\n                elen += 2;\r\n            } else {\r\n                elen += 3;\r\n            }\r\n        }\r\n        data = [];\r\n        elen = 0;\r\n        for (i = 0; i < l; ++i) {\r\n            ch = chars[i];\r\n            if (ch >= 1 && ch <= 127) {\r\n                data[elen++] = ch << 24 >> 24;\r\n            } else if (!ch || ch >= 128 && ch <= 2047) {\r\n                data[elen++] = (192 | ch >> 6 & 31) << 24 >> 24;\r\n                data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n            } else {\r\n                data[elen++] = (224 | ch >> 12 & 15) << 24 >> 24;\r\n                data[elen++] = (128 | ch >> 6 & 63) << 24 >> 24;\r\n                data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /** ce */\r\n\r\n    function toDouble(a) {\r\n        return a[1] + a[0];\r\n    }\r\n\r\n    /** cs */\r\n    function compress(str, mode, on_finish, on_progress) {\r\n        var this$static = {},\r\n            percent,\r\n            cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n            sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n\r\n        if (typeof on_finish != \"function\") {\r\n            cbn = on_finish;\r\n            on_finish = on_progress = 0;\r\n        }\r\n\r\n        on_progress = on_progress || function(percent) {\r\n            if (typeof cbn == \"undefined\")\r\n                return;\r\n\r\n            return update_progress(percent, cbn);\r\n        };\r\n\r\n        on_finish = on_finish || function(res, err) {\r\n            if (typeof cbn == \"undefined\")\r\n                return;\r\n\r\n            return postMessage({\r\n                action: action_compress,\r\n                cbn: cbn,\r\n                result: res,\r\n                error: err\r\n            });\r\n        };\r\n\r\n        if (sync) {\r\n            this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n            while ($processChunk(this$static.c.chunker));\r\n            return $toByteArray(this$static.c.output);\r\n        }\r\n\r\n        try {\r\n            this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n\r\n            on_progress(0);\r\n        } catch (err) {\r\n            return on_finish(null, err);\r\n        }\r\n\r\n        function do_action() {\r\n            try {\r\n                var res, start = (new Date()).getTime();\r\n\r\n                while ($processChunk(this$static.c.chunker)) {\r\n                    percent = toDouble(this$static.c.chunker.inBytesProcessed) / toDouble(this$static.c.length_0);\r\n                    /// If about 200 miliseconds have passed, update the progress.\r\n                    if ((new Date()).getTime() - start > 200) {\r\n                        on_progress(percent);\r\n\r\n                        wait(do_action, 0);\r\n                        return 0;\r\n                    }\r\n                }\r\n\r\n                on_progress(1);\r\n\r\n                res = $toByteArray(this$static.c.output);\r\n\r\n                /// delay so we don’t catch errors from the on_finish handler\r\n                wait(on_finish.bind(null, res), 0);\r\n            } catch (err) {\r\n                on_finish(null, err);\r\n            }\r\n        }\r\n\r\n        ///NOTE: We need to wait to make sure it is always async.\r\n        wait(do_action, 0);\r\n    }\r\n    /** ce */\r\n    /** ds */\r\n    function decompress(byte_arr, on_finish, on_progress) {\r\n        var this$static = {},\r\n            percent,\r\n            cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n            has_progress,\r\n            len,\r\n            sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n\r\n        if (typeof on_finish != \"function\") {\r\n            cbn = on_finish;\r\n            on_finish = on_progress = 0;\r\n        }\r\n\r\n        on_progress = on_progress || function(percent) {\r\n            if (typeof cbn == \"undefined\")\r\n                return;\r\n\r\n            return update_progress(has_progress ? percent : -1, cbn);\r\n        };\r\n\r\n        on_finish = on_finish || function(res, err) {\r\n            if (typeof cbn == \"undefined\")\r\n                return;\r\n\r\n            return postMessage({\r\n                action: action_decompress,\r\n                cbn: cbn,\r\n                result: res,\r\n                error: err\r\n            });\r\n        };\r\n\r\n        if (sync) {\r\n            this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n            while ($processChunk(this$static.d.chunker));\r\n            return decode($toByteArray(this$static.d.output));\r\n        }\r\n\r\n        try {\r\n            this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n\r\n            len = toDouble(this$static.d.length_0);\r\n\r\n            ///NOTE: If the data was created via a stream, it will not have a length value, and therefore we can't calculate the progress.\r\n            has_progress = len > -1;\r\n\r\n            on_progress(0);\r\n        } catch (err) {\r\n            return on_finish(null, err);\r\n        }\r\n\r\n        function do_action() {\r\n            try {\r\n                var res, i = 0, start = (new Date()).getTime();\r\n                while ($processChunk(this$static.d.chunker)) {\r\n                    if (++i % 1000 == 0 && (new Date()).getTime() - start > 200) {\r\n                        if (has_progress) {\r\n                            percent = toDouble(this$static.d.chunker.decoder.nowPos64) / len;\r\n                            /// If about 200 miliseconds have passed, update the progress.\r\n                            on_progress(percent);\r\n                        }\r\n\r\n                        ///NOTE: This allows other code to run, like the browser to update.\r\n                        wait(do_action, 0);\r\n                        return 0;\r\n                    }\r\n                }\r\n\r\n                on_progress(1);\r\n\r\n                res = decode($toByteArray(this$static.d.output));\r\n\r\n                /// delay so we don’t catch errors from the on_finish handler\r\n                wait(on_finish.bind(null, res), 0);\r\n            } catch (err) {\r\n                on_finish(null, err);\r\n            }\r\n        }\r\n\r\n        ///NOTE: We need to wait to make sure it is always async.\r\n        wait(do_action, 0);\r\n    }\r\n    /** de */\r\n    /** cs */\r\n    var get_mode_obj = (function () {\r\n        /// s is dictionarySize\r\n        /// f is fb\r\n        /// m is matchFinder\r\n        ///NOTE: Because some values are always the same, they have been removed.\r\n        /// lc is always 3\r\n        /// lp is always 0\r\n        /// pb is always 2\r\n        var modes = [\r\n            {s: 16, f:  64, m: 0},\r\n            {s: 20, f:  64, m: 0},\r\n            {s: 19, f:  64, m: 1},\r\n            {s: 20, f:  64, m: 1},\r\n            {s: 21, f: 128, m: 1},\r\n            {s: 22, f: 128, m: 1},\r\n            {s: 23, f: 128, m: 1},\r\n            {s: 24, f: 255, m: 1},\r\n            {s: 25, f: 255, m: 1}\r\n        ];\r\n\r\n        return function (mode) {\r\n            return modes[mode - 1] || modes[6];\r\n        };\r\n    }());\r\n    /** ce */\r\n\r\n    /// If we're in a Web Worker, create the onmessage() communication channel.\r\n    ///NOTE: This seems to be the most reliable way to detect this.\r\n    if (typeof onmessage != \"undefined\" && (typeof window == \"undefined\" || typeof window.document == \"undefined\")) {\r\n        (function () {\r\n            /* jshint -W020 */\r\n            /// Create the global onmessage function.\r\n            onmessage = function (e) {\r\n                if (e && e.data) {\r\n                    /** xs */\r\n                    if (e.data.action == action_decompress) {\r\n                        LZMA.decompress(e.data.data, e.data.cbn);\r\n                    } else if (e.data.action == action_compress) {\r\n                        LZMA.compress(e.data.data, e.data.mode, e.data.cbn);\r\n                    }\r\n                    /** xe */\r\n                    /// co:if (e.data.action == action_compress) {\r\n                    /// co:    LZMA.compress(e.data.data, e.data.mode, e.data.cbn);\r\n                    /// co:}\r\n                    /// do:if (e.data.action == action_decompress) {\r\n                    /// do:    LZMA.decompress(e.data.data, e.data.cbn);\r\n                    /// do:}\r\n                }\r\n            };\r\n        }());\r\n    }\r\n\r\n    return {\r\n        /** xs */\r\n        compress:   compress,\r\n        decompress: decompress,\r\n        /** xe */\r\n        /// co:compress:   compress\r\n        /// do:decompress: decompress\r\n    };\r\n}());\r\n\r\n/// This is used by browsers that do not support web workers (and possibly Node.js).\r\nthis.LZMA = this.LZMA_WORKER = LZMA;\r\n","const timeoutPromise = require('./timeoutPromise');\r\n\r\nmodule.exports = async (tabId, message) => {\r\n    return timeoutPromise(5000, new Promise((resolve, reject) => {\r\n        try {\r\n            chrome.tabs.sendMessage(tabId, message, (response) => {\r\n                resolve(response)\r\n            })\r\n        } catch (e) {\r\n            resolve(false);\r\n        }\r\n    }))\r\n}","module.exports = (millisecond, cb) => {\r\n    const timer = new Promise((resolve, reject) =>\r\n        setTimeout(() => resolve(false), millisecond)\r\n    );\r\n\r\n    return Promise.race([\r\n        cb,\r\n        timer\r\n    ]);\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const getLocalStorage = require('./utils/getLocalStorage');\r\nconst getTwitterTab = require('./utils/getTwitterTab');\r\nconst sendTabMessage = require('./utils/sendTabMessage');\r\nconst sendTabMessageGetResponse = require('./utils/sendTabMessage');\r\n\r\nconst inject = require('./utils/inject');\r\nconst getTabs = require('./utils/getTabs');\r\nconst isTwitterTab = require('./utils/isTwitterTab');\r\nconst fetchBlocks = require('./utils/fetchBlocks');\r\nconst calculateBlock = require('./utils/calculateBlock');\r\n\r\nasync function init() {\r\n    await chrome.action.setBadgeBackgroundColor({\r\n        color : '#d53030'\r\n    });\r\n    await getTwitterTab();\r\n}\r\n\r\nchrome.alarms.onAlarm.addListener(async (alarm) => {\r\n    switch (alarm.name) {\r\n        case 'sync':\r\n            await (async () => {\r\n                const { blocking } = await calculateBlock();\r\n\r\n                return chrome.action.setBadgeText({\r\n                    text : (blocking && blocking.length > 0) ? String(blocking.length) : ''\r\n                });\r\n\r\n                // yanıp sönme devre dışı bırakıldı\r\n                //\r\n                // if (blocking && blocking.length > 0) {\r\n                //     return chrome.action.setBadgeText({\r\n                //         text:\r\n                //     }).then(() => {\r\n                //         let count = 0;\r\n                //         let interval = setInterval(() => {\r\n                //             chrome.action.setBadgeBackgroundColor({\r\n                //                 color: (count % 2) ? '#000000' : '#d53030'\r\n                //             }).then(() => {\r\n                //                 if (count >= 30) return clearInterval(interval)\r\n                //                 count++;\r\n                //             })\r\n                //         }, 100)\r\n                //     })\r\n                // } else {\r\n                //     return chrome.action.setBadgeText({\r\n                //         text: ''\r\n                //     })\r\n                // }\r\n            })();\r\n\r\n            chrome.alarms.create('sync', { when : Date.now() + (10 * 1000) });\r\n            break;\r\n\r\n    }\r\n});\r\n\r\nchrome.runtime.onInstalled.addListener(async () => {\r\n    //chrome.storage.local.clear()\r\n    // chrome.storage.sync.clear()\r\n    await init();\r\n\r\n    chrome.alarms.get('sync', a => {\r\n        if (a) return;\r\n        chrome.alarms.create('sync', { when : Date.now() + (10 * 1000) });\r\n    });\r\n});\r\n\r\nchrome.tabs.onActivated.addListener(getTwitterTab);\r\n\r\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n    if (changeInfo.status === 'complete' && isTwitterTab(tab)) {\r\n        return getTwitterTab();\r\n    }\r\n});\r\n\r\nchrome.tabs.onRemoved.addListener(async (id, info) => {\r\n    const twitterTab = await getLocalStorage('tab');\r\n    if (twitterTab && twitterTab.id === id) return getTwitterTab();\r\n});\r\n\r\nchrome.storage.onChanged.addListener(async (data, storageType) => {\r\n    if (data['processing']) {\r\n        const processing = data['processing'];\r\n        let processingNew = processing.hasOwnProperty('newValue') ? processing['newValue'] : null;\r\n        let processingOld = processing.hasOwnProperty('oldValue') ? processing['oldValue'] : null;\r\n\r\n        if (!processingNew && processingOld) return;\r\n\r\n        if (processingNew && processingNew.hasOwnProperty('data') && processingNew.data.length > 0) {\r\n            return chrome.action.setBadgeText({\r\n                text : processingNew.data.length > 0 ? String(processingNew.data.length) : ''\r\n            });\r\n        }\r\n    }\r\n\r\n});\r\n\r\nchrome.runtime.onStartup.addListener(async () => {await init();});"],"sourceRoot":""}